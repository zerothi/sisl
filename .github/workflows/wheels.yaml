---
name: wheel creation

# Change this to whatever you want
on:
  push:
    tags:
     - 'v*'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Which branch to build wheels for'
        required: false
        default: 'main'


jobs:

  # upload the sdist
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: false

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

  choose_architectures:
    name: Decide architecture to build wheels for
    runs-on: ubuntu-latest
    steps:
      - id: x86_64
        run: echo "cibw_arch=x86_64" >> $GITHUB_OUTPUT
      - id: aarch64
        run: echo "cibw_arch=aarch64" >> $GITHUB_OUTPUT
    outputs:
      cibw_arches: ${{ toJSON(steps.*.outputs.cibw_arch) }}

  build_wheels_linux:
    needs: [build_sdist, choose_architectures]
    name: Wheel for Linux-${{ matrix.cibw_python }}-${{ matrix.cibw_arch }}
    runs-on: ${{ matrix.os }}

    strategy:
      # If one of the jobs fails, continue with the others.
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        cibw_python: ["cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*"]
        cibw_arch: ${{ fromJSON(needs.choose_architectures.outputs.cibw_arches) }}

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      # Setup the fortran compiler. This is aware of the operating system.
      - uses: awvwgk/setup-fortran@main
        id: setup-fortran
        with:
          compiler: gcc
          version: 11

      - name: Extract sdist
        run: |
          tar xvzf dist/*.tar.gz --strip-components=1

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.14.1
        env:
          CIBW_BUILD: cp${{ matrix.cibw_python }}
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_arch }}
          CIBW_PRERELEASE_PYTHONS: True
          # we do not test against the files folder,
          # this should be done in the regular testing facilities
          CIBW_TEST_COMMAND: pytest --pyargs sisl
          CIBW_TEST_SKIP: "*aarch64*"

      # Upload the wheel to the action's articfact.
      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./wheelhouse/*.whl

  build_wheels_macos:
    needs: [build_sdist]
    name: Wheel for MacOS-{{ matrix.cibw_python }}-${{ matrix.cibw_arch }}
    runs-on: ${{ matrix.os }}

    strategy:
      # If one of the jobs fails, continue with the others.
      fail-fast: false
      matrix:
        os: [macos-11]
        cibw_python: ["cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*"]
        cibw_arch: ["x86_64", "arm64"]

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      # Setup the fortran compiler. This is aware of the operating system.
      - uses: awvwgk/setup-fortran@main
        id: setup-fortran
        with:
          compiler: gcc
          version: 11

      - name: Extract sdist
        run: |
          tar xvzf dist/*.tar.gz --strip-components=1

      - name: Sets env vars for compilation
        if: matrix.cibw_arch == 'arm64'
        run: |
          echo "CFLAGS=-target arm64-apple-macos11" >> $GITHUB_ENV

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.14.1
        env:
          CIBW_BUILD: cp${{ matrix.cibw_python }}
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_arch }}
          CIBW_PRERELEASE_PYTHONS: True
          # we do not test against the files folder,
          # this should be done in the regular testing facilities
          CIBW_TEST_COMMAND: pytest --pyargs sisl
          CIBW_BUILD_VERBOSITY: 1
          MACOSX_DEPLOYMENT_TARGET: "10.14"

      # Upload the wheel to the action's articfact.
      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./wheelhouse/*.whl

  upload_pypi:
    needs: [build_wheels_linux, build_wheels_macos, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Avoid publishing Python 3.12 wheels (for now in dev)
        run: |
          rm -f dist/*cp312*
          ls -l dist/

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip_existing: true
          password: ${{ secrets.PYPI_TOKEN }}
