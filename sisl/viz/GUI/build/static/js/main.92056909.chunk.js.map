{"version":3,"sources":["apis/PythonApi.js","redux/actions/index.js","redux/actions/actionTypes.js","components/Navbar.js","apis/history.js","routes/Route.js","utils/hotkeys.js","components/plots/PlotCard.js","components/tabs/Tab.js","components/tabs/Tabs.js","components/plots/PlotDashboard.js","components/structures/StructureTag.js","components/controls/Controls.js","components/controls/NavigateButton.js","components/structures/PlotableTag.js","components/structures/StructurePicker.js","redux/reducers/session.js","redux/reducers/plots.js","redux/reducers/structures.js","redux/reducers/tabs.js","redux/reducers/active.js","redux/reducers/loading.js","redux/reducers/plotables.js","redux/reducers/persist.js","redux/reducers/index.js","components/plotInitializer/PlotTypePicker.js","components/plotInitializer/TabPicker.js","components/plotInitializer/StructureRow.js","components/plotInitializer/MergeMethodPicker.js","components/plotInitializer/StructuresGroup.js","components/plotInitializer/PlotInitializer.js","components/loading/LoadingChip.js","components/loading/LoadingTracker.js","components/settings/inputFields/TextInput.js","components/settings/inputFields/Switch.js","components/settings/inputFields/Dropdown.js","components/settings/inputFields/ColorPicker.js","components/settings/inputFields/RangeSlider.js","components/settings/inputFields/Range.js","components/settings/inputFields/Numeric.js","components/settings/inputFields/QueriesInput.js","components/settings/inputFields/Array.js","components/settings/InputField.js","components/settings/SettingsContainer.js","pages/PlotTweaking.js","pages/Settings.js","components/pythonMethods/Method.js","components/pythonMethods/Methods.js","pages/PlotMethods.js","pages/Plots.js","routes/index.js","redux/store/index.js","App.js","serviceWorker.js","index.js"],"names":["tabAdress","tabID","tabsAdress","plotAdress","plotID","plotsAdress","_requestToApi","adress","request","responseHandler","fetch","apiAdress","headers","then","response","json","statusCode","alert","error","plot","figure","JSON","parse","catch","console","log","_get","method","_post","_put","_delete","_updateSettings","newSettings","callback","body","stringify","settings","action","_undoSettings","_save","params","_load","getSessionSettings","sessionAdress","session","updateSessionSettings","sessionID","undoSessionSettings","saveSession","loadSession","getAvailableStructs","structsAdress","structures","getSessionTabs","tabs","addNewTab","newtabAdress","removeTab","updateTabParams","newTabParams","updateTabPlots","plotIDs","plots","setTabLayouts","layouts","getPlotOptions","plotTypesAdress","plotOptions","getPlot","getNewPlot","updatePlotSettings","undoPlotSettings","removePlot","showPlotFullScreen","askForUpdates","justUpdated","document","dispatchEvent","CustomEvent","detail","listenForPlotUpdates","sleepTime","stopListeningPlotUpdates","listenerID","setTimeout","update","clearTimeout","undefined","this","setCurrentSession","listenForUpdates","PythonApi","updateInterval","type","addPlots","newPlots","tabsIDs","setNewStructures","newStructures","setSessionTabs","setActivePlot","activePlot","setActiveTab","tab","activeTab","setActiveStructs","structs","deactivateStruct","structID","informLoadingPlot","informLoadedPlot","setActivePage","pageName","setActivePlotables","plotables","AppNavbar","brand","alignLinks","className","href","Component","connect","dispatch","clearSession","history","createBrowserHistory","RouteWrapper","component","isPrivate","rest","to","defaultProps","GLOBAL_HOT_KEYS","SHOW_AVAIL_HOTKEYS","name","sequence","GO_TO_SETTINGS","GO_TO_DASHBOARD","SAVE_SESSION","sequences","LOAD_SESSION","TABS_HOT_KEYS","global","MOVE_TO_NEXT_TAB","MOVE_TO_PREVIOUS_TAB","NEW_TAB","TRY","PLOTS_HOT_KEYS","PLOT_CARD_HOT_KEYS","GO_TO_PLOT_EDITING","GO_TO_PLOT_METHODS","FULL_SCREEN","REMOVE_PLOT","UNDO_PLOT_SETTINGS","SETTING_GROUP_HOT_KEYS","SUBMIT_SETTINGS","PLOT_TWEAKING_HOT_KEYS","UNDO_SETTINGS","SUBMIT_ALL_SETTINGS","PlotCard","props","hotKeysHandlers","goToPlotEditing","goToPlotMethods","undoSettings","id","Event","toast","success","active","reqParams","setPlotAsActive","state","isLoading","addEventListener","e","setState","cou","Math","random","style","borderRadius","textAlign","color","layout","backColor","paper_bgcolor","layoutSettings","_","groupBy","reduce","map","param","key","nestedLayoutParams","unflatten","delimiter","xaxis","yaxis","keyMap","handlers","width","height","display","flexDirection","overflow","background","paddingTop","flex","ref","plotlyRef","useResizeHandler","data","autosize","frames","onClick","onUpdate","config","responsive","paddingLeft","paddingRight","Provider","value","size","margin","data-tip","multiline","disable","showTooltips","mapDispatchToProps","Tab","updateTabs","iDeletedTab","findIndex","length","min","updateTabName","target","blur","textContent","tabName","contentEditable","onBlur","onKeyUp","keyCode","Tabs","moveThroughTabs","newTab","warn","direction","newI","i","last","noTabsMessage","flexWrap","alignItems","marginTop","marginBottom","ResponsiveReactGridLayout","WidthProvider","Responsive","PlotDashboard","currentBreakpoint","compactType","mounted","lg","emptyDashboard","noPlotsMessage","justifyContent","fontSize","fontWeight","backgroundColor","padding","onBreakpointChange","breakpoint","onResizeStop","finalL","initL","higher","h","shouldComponentUpdate","newProps","_plotsInLayout","hasDifferentPlots","isDifferentTab","find","isEqual","onLayoutChange","onDrop","elemParams","getLayout","filter","newPlotLayout","measureBeforeMount","useCSSTransforms","preventCollision","rowHeight","generateDOM","l","hotKeysHandler","pick","React","cols","md","sm","xs","xxs","x","grid_dims","y","w","setTabPlots","withHotKeys","StructureTag","struct","selected","toggleStruct","path","data-effect","replace","split","slice","Controls","saveCurrentSession","syncWithSession","showPage","prompt","rootDir","margins","marginRight","floating","icon","Control","tooltip","ROUTES","hotKey","NavigateButton","route","PlotableTag","plotable","togglePlotable","StructurePicker","togglePlotInitializer","selectedStructs","selectedPlotables","forceShow","forceHide","selectStructs","selectPlotables","xor","plotableID","toggleStructDisplay","displayStructures","togglePlotablesDisplay","displayPlotables","toggleAlphabeticSorting","toggles","alphabeticSorting","toggleSearchByFolder","searchByFolder","toggleSelectedSorting","selectedSorting","toggleAll","onDisplay","Object","keys","filterStructs","onDisplaySelected","intersection","displayedStructs","displayedPlotables","includes","searchString","forEach","object","index","isPlotable","newStructs","str","toTest","RegExp","test","newSearchString","noStructuresMessage","noMatchingStructuresMessage","structsAndPlotables","orderBy","noLayout","autocomplete","onChange","cursor","values","obj","activeStructs","activePlotables","defaultState","newState","settingKey","omit","iTab","cloneDeep","page","structsToDeactivate","Array","isArray","plotablesToDeactivate","loading","from","Date","newPlotables","persist","whitelist","reducer","persistReducer","storage","combineReducers","browser","createResponsiveStateReducer","small","medium","selectActiveStructs","selectActivePlotables","PlotTypePicker","options","placeholder","isClearable","isSearchable","isMulti","TabPicker","label","defaultValue","StructureRow","structure","groupActive","marginLeft","moveStructToActiveGroup","OPTIONS","MergeMethodPicker","StructuresGroup","initializingOptions","plotClasses","mergeMethod","activenessStyles","splitGroup","removeGroup","setGroupAsActive","transition","borderTopLeftRadius","val","onInitParamChange","PlotInitializer","onStructsUpdate","prevActiveStructs","structureGroups","markActiveGroup","newGroup","activeGroupIndex","activeGroup","cleanUnselectedFromGroups","groups","cleanGroups","group","push","groupParams","defaultTabID","addGroup","iGroup","g","splitted","updateGroupInitParams","toggleVisibility","updateInitializingOptions","afterPlot","processID","uuidv4","animation","plotClass","renderPlotable","deactivatePlotable","nothingToPlotMessage","prevProps","actions","right","paramName","borderLeftStyle","borderWidth","borderColor","LoadingChip","getLoadingTime","loadingInit","moment","diff","format","time","now","interval","setInterval","clearInterval","info","processName","join","elapsed","LoadingTracker","loadingInfo","Text","setting","inputField","SwitchInput","paddingBottom","checked","Dropdown","ColorPicker","toggleColorPicker","displayColorPicker","tempcolor","colorPicker","position","bottom","hex","onChangeComplete","RangeSlider","Range","Number","InputField","number","Numeric","additionalProps","QueriesField","pickerID","addQuery","newQuery","queryForm","queryParam","default","changeSettingValue","iQuery","paramKey","paramValue","newValue","renderInputField","fieldLayout","String","renderQuery","query","ArrayInput","changeValue","newVal","orientationStyles","vertical","inputStyle","borderStyle","INPUT_FIELDS","textinput","TextInput","switch","Switch","dropdown","rangeslider","range","queries","vector","string","isSizeDefined","sizeLabel","indexOf","mediaType","substr","changeSettings","onSettingChangeType","InputComponent","tooltipParams","help","ctrlKey","actionType","SettingsContainer","MOVE_EXPANDED_UP","moveExpanded","MOVE_EXPANDED_DOWN","newExpanded","expanded","refs","renderSettingsGroup","settingsGroup","renderSettingsGroups","groupedParams","paramGroups","paramGroup","iParamGroup","groupKey","subGrouped","itemContent","subGroups","submitSettings","header","description","left","popout","defaultActiveKey","PlotTweaking","setsCont","maxHeight","Settings","isEmpty","Method","applyMethod","renderDetails","showingDetails","source","iconRot","headerColor","transform","Methods","PlotMethods","Plots","getApplicationKeyMap","setNewPlotables","hotKeysListener","plotToInitialize","currentlyShowing","displayPlotInitializer","loadingPlots","listener","MainComponent","minWidth","Routes","exact","store","createStore","rootReducer","responsiveStoreEnhancer","persistor","persistStore","getStoreAndPersistor","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92056909.chunk.js","sourcesContent":["\n//This class will contain all the fetches to the python API\nclass PythonApi {\n\n    constructor(){\n\n        this.apiAdress = 'http://localhost:4000'\n\n        this.listenerID = undefined\n\n    }\n\n    //ADDRESSES\n    get sessionAdress(){\n        return \"/sislGUI/session\"\n    }\n\n    get tabsAdress(){\n        return \"/sislGUI/tab\"\n    }\n\n    get newtabAdress(){\n        return this.tabsAdress + \"/new\"\n    }\n\n    tabAdress = (tabID) => {\n        return this.tabsAdress + \"/\" + tabID\n    }\n\n    get plotsAdress(){\n        return \"/sislGUI/plot\"\n    }\n\n    plotAdress = (plotID) => {\n        return this.plotsAdress + \"/\" + plotID\n    }\n\n    get plotTypesAdress(){\n        return \"/sislGUI/plotTypes\"\n    }\n\n    get structsAdress(){\n        return \"/sislGUI/structs\"\n    }\n\n    //MOST LOW LEVEL METHODS (Should not be used directly)\n    _requestToApi = (adress, request, responseHandler ) => {\n\n        fetch(this.apiAdress + adress, \n      {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        ...request\n    })\n      .then(response => response.json())\n      .then(response => {\n        if (response.statusCode >= 400){\n            alert(response.error)\n        } else {\n\n            //The plot figure comes double JSON encoded (Plotly encoding + flask encoding)\n            if (response.plot){\n\n                response = {\n                    ...response,\n                    plot: {\n                        ...response.plot,\n                        figure: JSON.parse(response.plot.figure)\n                    }\n                }\n            }\n\n            responseHandler(response)\n        }\n      })\n      .catch((error) => {\n          console.log(error)\n          //alert(\"Can not connect to the API, are you sure it is running? If so, check your API adress in settings.\")\n      })\n    }\n\n    _get = (adress, {request, responseHandler}) => {\n        this._requestToApi(adress, {...request, method: 'GET'}, responseHandler)\n    }\n\n    _post = (adress, {request, responseHandler}) => {\n        this._requestToApi(adress, {...request, method: 'POST'}, responseHandler)\n    }\n\n    _put = (adress, {request, responseHandler}) => {\n        this._requestToApi(adress, {...request, method: 'PUT'}, responseHandler)\n    }\n\n    _delete = (adress, {request, responseHandler}) => {\n        this._requestToApi(adress, {...request, method: 'DELETE'}, responseHandler)\n    }\n\n    //A BIT HIGHER LEVEL METHODS (to be used by high level methods below)\n    _updateSettings = (adress, newSettings, callback = () => {}) => {\n        this._post(adress, {request: {body: JSON.stringify({settings: newSettings, action: \"updateSettings\"})}, responseHandler: callback})\n    }\n\n    _undoSettings = (adress, callback = () => {}) => {\n        this._post(adress, {request: {body: JSON.stringify({action: \"undoSettings\"})}, responseHandler: callback})\n    }\n\n    _save = (adress, params, callback = () => {}) => {\n        this._post(adress, {request: {body: JSON.stringify({action: \"save\", ...params})}, responseHandler: callback})\n    }\n\n    _load = (adress, params, callback = () => {}) => {\n        this._post(adress, {request: {body: JSON.stringify({action: \"load\", ...params})}, responseHandler: callback})\n    }\n\n\n    //HIGH LEVEL METHODS (should be used by components)\n\n    getSessionSettings = (callback = () => {}) => {\n        this._get(this.sessionAdress, {responseHandler: (response) => callback(response.session)} )\n    }\n\n    updateSessionSettings = ( sessionID, newSettings, callback = () => {}) => {\n        this._updateSettings(this.sessionAdress, newSettings, (response) => callback(response.session))\n    }\n\n    undoSessionSettings = ( sessionID, callback = () => {}) => {\n\n        this._undoSettings(this.sessionAdress, (response) => callback(response.session))\n    }\n\n    saveSession = (params, callback = () => {}) => {\n        this._save(this.sessionAdress, params, (response) => callback(response.session, params))\n    }\n\n    loadSession = (params, callback = () => {}) => {\n        this._load(this.sessionAdress, params, (response) => callback(response.session, params))\n    }\n\n    getAvailableStructs = (callback = () => {}) => {\n\n        this._get(this.structsAdress, {responseHandler: (response) => callback(response.structures, response)} )\n        \n    }\n\n    getSessionTabs = (callback = () => {}) => {\n\n        this._get(this.tabsAdress, {responseHandler: (response) => callback(response.tabs)} )\n        \n    }\n\n    addNewTab = (callback = () => {}) => {\n\n        this._get(this.newtabAdress, {responseHandler: (response) => callback(response.tabs)} )\n        \n    }\n\n    removeTab = (tabID, callback = () => {}) => {\n\n        this._delete(this.tabAdress(tabID), {responseHandler: (response) => callback(response.tabs)} )\n        \n    }\n\n    updateTabParams = (tabID, newTabParams, callback = () => {}) => {\n\n        this._put(this.tabAdress(tabID), {request: {body: JSON.stringify(newTabParams)}, responseHandler: (response) => callback(response.tabs)} )\n        \n    }\n\n    updateTabPlots = (tabID, plotIDs, callback) => this.updateTabParams(tabID, {plots: plotIDs}, callback)\n\n    setTabLayouts = (tabID, layouts, callback) => this.updateTabParams(tabID, {layouts}, callback)\n\n    getPlotOptions = (callback = () => {}) => {\n        this._get(this.plotTypesAdress, {responseHandler: (response) => callback(response.plotOptions)} )\n    }\n\n    getPlot = (plotID, callback = () => {}) => {\n\n        this._get(this.plotAdress(plotID), {responseHandler: (response) => callback(response.plot)})\n    }\n\n    getNewPlot = (params, callback = () => {}) => {\n\n        this._post(this.plotsAdress, {request: {body: JSON.stringify(params)}, responseHandler: (response) => callback(response.plot, params)})\n    }\n\n    updatePlotSettings = ( plotID, newSettings, callback = () => {}) => {\n\n        this._updateSettings(this.plotAdress(plotID), newSettings, (response) => callback(response.plot))\n    }\n\n    undoPlotSettings = ( plotID, callback = () => {}) => {\n\n        this._undoSettings(this.plotAdress(plotID), (response) => callback(response.plot))\n    }\n\n    removePlot = (params, callback = () => {}) => {\n\n        this._delete(this.plotAdress(params.plotID), { responseHandler: (response) => callback(response.session,params)})\n    }\n\n    showPlotFullScreen = ( plotID, callback = () => {}) => {\n        this._post(this.plotAdress(plotID), {request: {body: JSON.stringify({action: \"fullScreen\"})}, responseHandler: (response) => callback(response.plot)})\n    }\n\n    askForUpdates = (callback = (session, justUpdated) => {document.dispatchEvent(new CustomEvent(\"sessionUpdate\", {detail: {session, justUpdated}}))}) => {\n        /*Uses the commit_updates method of the Session class */\n        this._post(this.sessionAdress, {request: {body: JSON.stringify({action: \"updatePlots\"})}, responseHandler: (response) => callback(response.session, response.justUpdated)})\n    }\n\n    listenForPlotUpdates = (sleepTime) => {\n\n        this.stopListeningPlotUpdates()\n\n        const update = () => {\n            this.askForUpdates()\n            clearTimeout(this.listenerID)\n            this.listenerID = setTimeout(update, sleepTime); // (*)\n        }\n\n        this.listenerID = setTimeout(update, sleepTime);\n    }\n\n    stopListeningPlotUpdates = () => {\n        if (this.listenerID){\n            clearTimeout(this.listenerID)\n        }\n\n        this.listenerID = undefined\n        \n    }\n\n}\n\nexport default new PythonApi();","import { \n    ADD_PLOTS,\n    REMOVE_PLOT,\n    ADD_TABS,\n    SET_STRUCTURES,\n    SET_TAB_PLOTS,\n    SET_SESSION_TABS,\n    SET_ACTIVE_PLOT,\n    SET_ACTIVE_TAB,\n    CLEAR_SESSION,\n    SET_SESSION,\n    SET_ACTIVE_STRUCTS,\n    DEACTIVATE_STRUCT,\n    START_LOADING_PLOT,\n    END_LOADING_PLOT,\n    SET_ACTIVE_PAGE,\n    DEACTIVATE_PLOTABLE,\n    SET_ACTIVE_PLOTABLES,\n    SET_PLOTABLES\n} from './actionTypes'\n\nimport PythonApi from \"../../apis/PythonApi\"\n\nexport const setCurrentSession = (session) => {\n    \n    if (session.settings.listenForUpdates){\n        PythonApi.listenForPlotUpdates(session.settings.updateInterval)\n    } else {\n        PythonApi.stopListeningPlotUpdates()\n    }\n\n    return {\n        type: SET_SESSION,\n        session\n    }\n}\n    \nexport const addPlots = (newPlots, tabsIDs) => ({\n    type: ADD_PLOTS,\n    newPlots,\n    tabsIDs\n})\n\nexport const removePlot = (plotID, tabID) => ({\n    type: REMOVE_PLOT,\n    plotID,\n    tabID\n})\n\nexport const changeSettings = (actionType, settingKey, value) => ({\n    type: actionType, //Valid action types are all of type CHANGE_<something>_SETTINGS\n    settingKey,\n    value\n})\n\nexport const addTabs = (newTabs) => ({\n    type: ADD_TABS,\n    newTabs\n})\n\nexport const setNewStructures = (newStructures) => ({\n    type: SET_STRUCTURES,\n    newStructures\n})\n\nexport const setTabPlots = (tabID, plots) => ({\n    type: SET_TAB_PLOTS,\n    tabID,\n    plots\n})\n\nexport const setSessionTabs = (tabs) => ({\n    type: SET_SESSION_TABS,\n    tabs\n})\n\nexport const setActivePlot = (plot) => ({\n    type: SET_ACTIVE_PLOT,\n    activePlot: plot\n})\n\nexport const setActiveTab = (tab) => ({\n    type: SET_ACTIVE_TAB,\n    activeTab: tab\n})\n\nexport const clearSession = () => ({\n    type: CLEAR_SESSION,\n})\n\nexport const setActiveStructs = (structs) => ({\n    type: SET_ACTIVE_STRUCTS,\n    structs: structs\n})\n\nexport const deactivateStruct = (structID) => ({\n    type: DEACTIVATE_STRUCT,\n    structID\n})\n\nexport const informLoadingPlot = (plot) => ({\n    type: START_LOADING_PLOT,\n    plot\n})\n\nexport const informLoadedPlot = (plotID) => ({\n    type: END_LOADING_PLOT,\n    plotID\n})\n\nexport const setActivePage = (pageName) => ({\n    type: SET_ACTIVE_PAGE,\n    pageName\n})\n\nexport const setNewPlotables = (newPlotables) => ({\n    type: SET_PLOTABLES,\n    newPlotables\n})\n\nexport const setActivePlotables = (plotables) => ({\n    type: SET_ACTIVE_PLOTABLES,\n    plotables\n})\n\nexport const deactivatePlotable = (plotableID) => ({\n    type: DEACTIVATE_PLOTABLE,\n    plotableID\n})\n\n\n\n","export const ADD_PLOTS = 'ADD_PLOTS'\nexport const REMOVE_PLOT = 'REMOVE_PLOT'\nexport const CHANGE_PLOT_SETTINGS = 'CHANGE_PLOT_SETTINGS'\nexport const ADD_TABS = 'ADD_TABS'\nexport const SET_STRUCTURES = 'SET_STRUCTURES'\nexport const SET_PLOTABLES = 'SET_PLOTABLES'\nexport const SET_TAB_PLOTS = 'SET_TAB_PLOTS'\nexport const SET_SESSION_TABS = 'SET_SESSION_TABS'\n//Activate\nexport const SET_ACTIVE_PLOT = 'SET_ACTIVE_PLOT'\nexport const SET_ACTIVE_TAB = 'SET_ACTIVE_TAB'\nexport const SET_ACTIVE_STRUCTS = 'SET_ACTIVE_STRUCTS'\nexport const SET_ACTIVE_PLOTABLES = 'SET_ACTIVE_PLOTABLES'\n//Deactivate\nexport const DEACTIVATE_STRUCT = 'DEACTIVATE_STRUCT'\nexport const DEACTIVATE_PLOTABLE = 'DEACTIVATE_PLOTABLE'\nexport const SET_SESSION = 'SET_SESSION'\nexport const CHANGE_SESSION_SETTINGS = 'CHANGE_SESSION_SETTINGS'\nexport const CLEAR_SESSION = 'CLEAR_SESSION'\nexport const START_LOADING_PLOT = 'START_LOADING_PLOT'\nexport const END_LOADING_PLOT = 'END_LOADING_PLOT'\nexport const SET_ACTIVE_PAGE = 'SET_ACTIVE_PAGE'\n\n\n","import React, { Component } from 'react'\nimport {Navbar, NavItem, Icon} from 'react-materialize';\n\n//--Redux\nimport { connect } from 'react-redux'\nimport {clearSession} from \"../redux/actions\"\n\nclass AppNavbar extends Component {\n    render() {\n        return (\n            <Navbar brand={<a />} alignLinks=\"right\" className=\"transparent z-depth-0\">\n                <NavItem className=\"blackText\" href=\"/plots\">\n                    Plots\n                </NavItem>\n                <NavItem href=\"/settings\">\n                    <Icon>settings</Icon>\n                </NavItem>\n                <NavItem href=\"/settings\">\n                    <Icon>help</Icon>\n                </NavItem>\n            </Navbar>\n            \n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    clearSession: () => dispatch(clearSession()),\n})\n\nexport default connect(null, mapDispatchToProps)(AppNavbar);\n","import { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nexport default history;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport default function RouteWrapper({\n  component: Component,\n  isPrivate,\n  ...rest\n}) {\n  const signed = false;\n\n  /**\n   * Redirect user to SignIn page if he tries to access a private route\n   * without authentication.\n   */\n  if (isPrivate && !signed) {\n    return <Redirect to=\"/\" />;\n  }\n\n  /**\n   * Redirect user to Main page if he tries to access a non private route\n   * (SignIn or SignUp) after being authenticated.\n   */\n  if (!isPrivate && signed) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  /**\n   * If not included on both previous cases, redirect user to the desired route.\n   */\n  return <Route {...rest} component={Component} />;\n}\n\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n  component: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired\n};\n\nRouteWrapper.defaultProps = {\n  isPrivate: false\n};\n","import _ from 'lodash'\n\nexport const GLOBAL_HOT_KEYS = {\n\n    //HELP\n    SHOW_AVAIL_HOTKEYS:{\n        name: \"Show available hotkeys\",\n        sequence: \"shift+?\"\n    },\n\n    //NAVIGATION\n    GO_TO_SETTINGS: {\n        name: \"Go to settings\",\n        sequence: \"shift+s\",\n    },\n    GO_TO_DASHBOARD: {\n        name: \"Go to the plot's dashboard\",\n        sequence: \"shift+d\",\n    },\n\n    //SESSION\n    SAVE_SESSION: {\n        name: \"Save session\",\n        sequences: [\"ctrl+shift+s\", \"ctrl+alt+s\"]\n    },\n    LOAD_SESSION: {\n        name: \"Load session\",\n        sequences: [\"ctrl+shift+l\", \"ctrl+alt+l\"]\n    }\n\n}\n\nexport const ADDITIONAL_GLOBAL_HOT_KEYS = {\n    settings: {\n\n    },\n    plots:{\n        \n\n    }\n}\n\nexport const SETTINGS_HOT_KEYS = {\n\n}\n\nexport const TABS_HOT_KEYS = {\n    global: {\n        // TAB NAVIGATION\n        MOVE_TO_NEXT_TAB: {\n            name: \"Move to next tab\",\n            sequence: \"shift+t+right\",\n        },\n        MOVE_TO_PREVIOUS_TAB: {\n            name: \"Move to previous tab\",\n            sequence: \"shift+t+left\",\n        },\n        NEW_TAB: {\n            name: \"New tab\",\n            sequence: \"shift+t\",\n            action: \"keyup\"\n        },\n        TRY: \"shift+t+r\"\n    }\n}\n\nexport const PLOTS_HOT_KEYS = {\n    global: {\n        // TAB NAVIGATION\n        MOVE_TO_NEXT_TAB: {\n            name: \"Move to next tab\",\n            sequence: \"shift+right\",\n        },\n        MOVE_TO_PREVIOUS_TAB: {\n            name: \"Move to previous tab\",\n            sequence: \"shift+left\",\n        },\n    }\n}\n\nexport const PLOT_CARD_HOT_KEYS = {\n\n    GO_TO_PLOT_EDITING: {\n        name: \"Edit current plot\",\n        sequence: \"e\"\n    },\n    GO_TO_PLOT_METHODS: {\n        name: \"Go to current plot methods\",\n        sequence: \"m\"\n    },\n    FULL_SCREEN: {\n        name: \"See current plot in full screen in a different browser's tab\",\n        sequence: \"f\"\n    },\n    REMOVE_PLOT: {\n        name: \"Remove current plot\",\n        sequences: [\"del\",\"backspace\"]\n    },\n    UNDO_PLOT_SETTINGS: {\n        name: \"Undo current plot settings\",\n        sequence: \"ctrl+z\"\n    }\n\n}\n\nexport const STRUCTURE_PICKER_HOT_KEYS = {\n\n}\n\nexport const SETTING_CONTAINER_HOT_KEYS = {\n\n    MOVE_EXPANDED_UP:{\n        name: \"Expand the previous settings group\",\n        sequence: \"up\"\n    },\n    MOVE_EXPANDED_DOWN:{\n        name: \"Expand the next settings group\",\n        sequence: \"down\"\n    }\n\n}\n\nexport const SETTING_GROUP_HOT_KEYS = {\n\n    SUBMIT_SETTINGS:{\n        name: \"Submit this group's settings\",\n        sequence: \"shift+enter\"\n    },\n    \n}\n\nexport const PLOT_TWEAKING_HOT_KEYS = {\n    global:{\n        UNDO_SETTINGS: {\n            name:\"Undo settings\",\n            sequence: \"ctrl+z\"\n        },\n\n        SUBMIT_ALL_SETTINGS: {\n            name: \"Submit all settings\",\n            sequence: \"shift+enter\"\n        }\n    }\n}","import React, { Component } from 'react'\nimport Plot from 'react-plotly.js';\nimport { Card, Row, Icon } from 'react-materialize';\nimport { AiOutlineEdit, AiOutlineDelete, AiOutlineExport, AiOutlineFullscreen } from 'react-icons/ai'\nimport { FaHammer } from 'react-icons/fa'\nimport { IconContext } from 'react-icons'\n\nimport { CircleLoader} from 'react-spinners';\nimport ReactTooltip from \"react-tooltip\"\n\nimport _ from \"lodash\"\nimport {unflatten} from \"flat\"\n\n//--Redux\nimport { connect } from 'react-redux'\nimport { setActivePlot, removePlot, setSessionTabs, setActivePage, addPlots} from \"../../redux/actions\"\nimport PythonApi from '../../apis/PythonApi';\nimport { HotKeys } from 'react-hotkeys';\nimport { PLOT_CARD_HOT_KEYS } from '../../utils/hotkeys';\nimport { toast } from 'react-toastify';\n\nclass PlotCard extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            isLoading: false,\n        }\n\n    }\n\n    hotKeysHandlers = {\n        GO_TO_PLOT_EDITING: () => this.goToPlotEditing(),\n        GO_TO_PLOT_METHODS: () => this.goToPlotMethods(),\n        FULL_SCREEN: () => this.showPlotFullScreen(),\n        UNDO_PLOT_SETTINGS: () => this.undoSettings(),\n        REMOVE_PLOT: () => this.removePlot()\n    }\n\n    undoSettings = () => {\n        PythonApi.undoPlotSettings(this.props.plot.id, (plot) => {\n            this.props.addPlots({[plot.id]: plot})\n            document.dispatchEvent(new Event(\"newPlot\"))\n            toast.success(\"Rolled back settings\")\n        })\n    }\n\n    componentDidMount(){\n        document.addEventListener(\"plotResize\", (e) => {\n            \n            if (e.detail.id == this.props.plot.id || e.detail.id == \"all\"){\n                this.setState({cou: Math.random()})          \n            }\n            \n        })\n    }\n\n    removePlot = () => {\n        PythonApi.removePlot({ plotID: this.props.plot.id, tabID: this.props.active.tab}, (session, reqParams) => {\n            this.props.setSessionTabs(session.tabs)\n            this.props.removePlot(reqParams.plotID)\n        })\n        \n    }\n\n    goToPlotEditing = () => {\n        this.setPlotAsActive()\n        this.props.setActivePage(\"plotTweaking\")\n    }\n\n    goToPlotMethods = () => {\n        this.setPlotAsActive()\n        this.props.setActivePage(\"plotMethods\")\n    }\n\n    setPlotAsActive = () => {\n        this.props.setActivePlot(this.props.plot)\n    }\n\n    showPlotFullScreen = () => {\n        PythonApi.showPlotFullScreen(this.props.plot.id)\n    }\n\n    render() {\n\n        if (this.state.isLoading || !this.props.plot) {\n            return (\n                <Card \n                    className=\"plotcard\"\n                    style={{borderRadius: 15}}>\n                    <Row style={{textAlign: \"center\"}}>\n                        <CircleLoader color=\"#36D7B7\"/>\n                    </Row>\n                    <div>We are working hard to load your plot.</div>\n                </Card>\n            )\n        }\n\n        let layout = this.props.plot.figure.layout;\n        let backColor = this.props.plot.settings.paper_bgcolor || \"white\"\n\n        //If this is the active plot, we are going to overwrite the layout with the settings (so that user is able to see a preview)\n        if (this.props.active.plot && this.props.active.plot.id == this.props.plot.id){\n\n            backColor = this.props.active.plot.settings.paper_bgcolor || \"white\"\n\n            // let layoutSubGroups = _.groupBy( _.groupBy(this.props.active.plot.params, \"group\")[\"layout\"] , \"subGroup\")\n\n            // layout = {\n            //     ...layout,\n            //     ...layoutSubGroups[\"undefined\"].reduce((map, param) => {map[param.key] = this.props.active.plot.settings[param.key]; return map}, {} ),\n            //     \"xaxis\": {\n            //         ...layout.xaxis,\n            //         ...layoutSubGroups[\"xaxis\"].reduce((map, param) => {map[param.key.split(\"_\").pop()] = this.props.active.plot.settings[param.key]; return map}, {}),\n            //     },\n            //     \"yaxis\": {\n            //         ...layout.yaxis,\n            //         ...layoutSubGroups[\"yaxis\"].reduce((map, param) => {map[param.key.split(\"_\").pop()] = this.props.active.plot.settings[param.key]; return map}, {} ),\n            //     }\n\n            // }\n\n            let layoutParams = _.groupBy(this.props.active.plot.params, \"group\")[\"layout\"]\n\n            let layoutSettings = layoutParams.reduce((map,param) => {map[param.key] = this.props.active.plot.settings[param.key]; return map},{})\n\n            let nestedLayoutParams = unflatten( layoutSettings, {delimiter: \"_\"})\n\n\n            layout = {\n                ...layout,\n                ...layoutSettings,\n                \"xaxis\": {\n                    ...layout.xaxis,\n                    ...nestedLayoutParams.xaxis\n                },\n                \"yaxis\": {\n                    ...layout.yaxis,\n                    ...nestedLayoutParams.yaxis\n                }\n\n            }\n            \n        }\n\n        return <HotKeys\n                 keyMap={PLOT_CARD_HOT_KEYS} handlers={this.hotKeysHandlers}\n                 style={ {width: \"100%\", height: \"100%\", display: \"flex\", flexDirection: \"column\", borderRadius: 3, overflow:\"hidden\", background: backColor, paddingTop: 5, ...this.props.style}}>\n                <div style={{flex:1}}>\n                    <Plot\n                        ref={plotlyRef => {\n                            this.plotlyRef = plotlyRef;\n                        }}\n                        useResizeHandler\n                        style={{ width: \"100%\", height: \"100%\"}}\n                        data={this.props.plot.figure.data}\n                        layout={{autosize: true, ...layout}}\n                        frames={this.props.plot.figure.frames}\n                        onClick={(data) => {}}\n                        onUpdate={(figure) => {}}\n                        config={{responsive: true}}\n                    />\n                </div>\n                \n            <div style={{display: \"flex\", paddingLeft: 10, paddingRight: 20}} className=\"card-action\">\n                <IconContext.Provider value={{size: 25, style:{margin: 5}}}>\n                    <div style={{flex:1, textAlign: \"left\"}}>\n                        <a data-tip=\"Full screen (f)\" href=\"#\" onClick={this.showPlotFullScreen}><AiOutlineFullscreen/></a> \n                    </div>\n\n                    <div>\n                        <a\n                            data-tip=\"Methods (m)\"\n                            href=\"#\"\n                            onClick={this.goToPlotMethods}><FaHammer/></a>\n                        <a\n                            data-tip=\"Edit (e)\"\n                            href=\"#\"\n                            onClick={this.goToPlotEditing}><AiOutlineEdit/></a>\n                        <a data-tip=\"Export data\" href=\"#\"><AiOutlineExport/></a>\n                        <a data-tip=\"Remove (supr)\" href=\"#\" onClick={this.removePlot}><AiOutlineDelete color=\"red\"/></a>\n                    </div> \n                </IconContext.Provider>\n                <ReactTooltip multiline disable={this.props.session.settings ? !this.props.session.settings.showTooltips : false}/>\n            </div>  \n        </HotKeys>\n    }\n}\n\nconst mapStateToProps = state => ({\n    plots: state.plots,\n    active: state.active,\n    session: state.session\n})\n\nconst mapDispatchToProps = {\n    setSessionTabs,\n    setActivePlot,\n    removePlot,\n    setActivePage,\n    addPlots\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlotCard);\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport PythonApi from '../../apis/PythonApi'\nimport { setActiveTab } from '../../redux/actions'\n\nimport {Icon} from \"react-materialize\"\n\nimport _ from \"lodash\"\n\nclass Tab extends Component {\n\n    updateTabs = (tabs) => {\n        document.dispatchEvent(new CustomEvent(\"updateTabs\", {detail: {tabs: tabs}}))\n    }\n\n    updateTabParams = (tabID, newTabParams) => {\n\n        PythonApi.updateTabParams(tabID, newTabParams, (tabs) => {\n            this.updateTabs(tabs)\n        })\n    }\n\n    removeTab = (tabID) => {\n\n        let iDeletedTab = _.findIndex(this.props.tabs, [\"id\", tabID])\n\n        PythonApi.removeTab(tabID, (tabs) => {\n            this.props.setActiveTab(tabs.length > 0 ? tabs[Math.min(tabs.length - 1, iDeletedTab)].id : undefined)\n            this.updateTabs(tabs)\n        })\n\n    }\n\n    updateTabName = (e) => {e.target.blur(); this.updateTabParams(e.target.id, {name: e.target.textContent})}\n\n    render() {\n\n        let {id: tabID, name: tabName} = this.props.tab\n\n        let active = tabID == this.props.active.tab\n\n        return (\n            <div\n                    key={tabID}\n                    className={active ? \"active plotTab\" : \"plotTab\"}\n                    onClick={active ? null : ()=> this.props.setActiveTab(tabID)}>\n                <div\n                    id={tabID}\n                    contentEditable={active}\n                    \n                    onBlur={this.updateTabName}\n                    onKeyUp={(e) => {if (e.keyCode === 13) this.updateTabName(e)}}\n                    >{tabName}</div>\n                {active ? <div className=\"removeTabBut\" onClick={() => this.removeTab(tabID)}><Icon>remove_circle</Icon></div> : null}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    active: state.active,\n    tabs: state.tabs,\n})\n\nconst mapDispatchToProps = {\n    setActiveTab\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tab);\n","import React, { Component } from 'react'\nimport Tab from './Tab'\nimport { setActiveTab } from '../../redux/actions'\nimport PythonApi from '../../apis/PythonApi'\nimport { connect } from 'react-redux'\n\nimport {Icon} from \"react-materialize\"\n\nimport _ from \"lodash\"\nimport { GlobalHotKeys, HotKeys } from 'react-hotkeys'\nimport { TABS_HOT_KEYS } from '../../utils/hotkeys'\n\nexport class Tabs extends Component {\n\n    hotKeysHandlers = {\n        MOVE_TO_NEXT_TAB: () => this.moveThroughTabs(\"right\"),\n        MOVE_TO_PREVIOUS_TAB: () => this.moveThroughTabs(\"left\"),\n        NEW_TAB: () => this.newTab(),\n        TRY: () => console.warn(\"YES\")\n    }\n    \n    moveThroughTabs = (direction) => {\n\n        const tabs = this.props.tabs\n        const i = _.findIndex(tabs, [\"id\", this.props.active.tab])\n\n        var newI;\n        if (direction == \"left\"){\n            newI = i != 0 ? i-1 : tabs.length -1\n        } else if (direction == \"right\"){\n            newI = i != tabs.length - 1 ? i+1 : 0 \n        }\n\n        this.props.setActiveTab(tabs[newI].id)\n    }\n\n    updateTabs = (tabs) => {\n        document.dispatchEvent(new CustomEvent(\"updateTabs\", {detail: {tabs: tabs}}))\n    }\n\n    newTab = () => {\n\n        PythonApi.addNewTab( (tabs) => {\n            this.updateTabs(tabs)\n            this.props.setActiveTab(_.last(tabs).id)\n        })\n        \n    }\n\n    noTabsMessage = () => {\n        return <div style={{paddingLeft: 20}}>\n            <span style={{color: \"darkred\"}}>You don't seem to have any tab. </span>\n            That's wierd, but if that's what you want...\n        </div>\n    }\n\n    render() {\n\n        return (\n            <div style={{display: \"flex\", flexWrap: \"wrap\", alignItems:\"center\", marginTop: 10, marginBottom: 5}}>\n                <GlobalHotKeys keyMap={TABS_HOT_KEYS.global} handlers={this.hotKeysHandlers}/>\n                <div onClick={this.newTab} data-tip=\"New tab\">\n                    <Icon\n                        className=\"newTabIcon small blue-text text-darken-3\"\n                        style={{paddingRight: 0}}>create_new_folder</Icon>\n                </div>\n                {this.props.tabs.length == 0 ? \n                    this.noTabsMessage()\n                    :\n                    this.props.tabs.map( tab => <Tab tab={tab}/>)\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tabs: state.tabs,\n    active: state.active\n})\n\nconst mapDispatchToProps = {\n    setActiveTab\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tabs);\n","import React, { Component } from \"react\";\n\nimport _ from \"lodash\"\n\n//--Components\nimport PlotCard from \"./PlotCard\";\n\n//--Redux\nimport { connect } from 'react-redux'\nimport { setTabPlots, setSessionTabs} from \"../../redux/actions\"\nimport PythonApi from \"../../apis/PythonApi\";\n\nimport { Responsive, WidthProvider } from 'react-grid-layout';\n\nimport 'react-grid-layout/css/styles.css'\nimport'react-resizable/css/styles.css'\n\nimport { HotKeys, withHotKeys, GlobalHotKeys } from \"react-hotkeys\";\nimport { PLOTS_HOT_KEYS, ADDITIONAL_GLOBAL_HOT_KEYS } from \"../../utils/hotkeys\";\nimport Tabs from \"../tabs/Tabs\";\n\nconst ResponsiveReactGridLayout = WidthProvider(Responsive);\n\nclass PlotDashboard extends React.Component {\n\n  constructor(props){\n    super(props)\n\n    this._plotsInLayout = false\n\n  }\n\n  static defaultProps = {\n    className: \"layout\",\n    rowHeight: 30,\n    onLayoutChange: function() {},\n    cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n  };\n\n  state = {\n    currentBreakpoint: \"lg\",\n    compactType: \"vertical\",\n    mounted: false,\n    layouts: { lg: [] }\n  };\n\n  componentDidMount() {\n    this.setState({ mounted: true });\n  }\n\n  emptyDashboard = () => {\n    return null\n  }\n\n  noTabsMessage = () => {\n    return null\n  }\n\n  noPlotsMessage = () => {\n    //className=\"attentionLeft\"\n    return <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\", height: \"100%\"}}>\n      <div style={{fontSize: \"5em\", fontWeight: \"bold\"}}>This is the plots dashboard.</div>\n      <div style={{fontSize: \"1.2em\"}}>We would like to display your plots here, but currently you don't seem to have any</div>\n      <div style={{backgroundColor: \"white\",  fontSize: \"2em\", margin: 20, padding: 20, paddingLeft: 50, paddingRight: 50, borderRadius: 70}}> You can try to create one by clicking on your structures</div>\n    </div>\n  }\n\n  static newPlotLayout = (plot, layouts) => {\n    return {\n      x: plot.grid_dims[0]*(layouts.lg.length),\n      y: 2,\n      w: plot.grid_dims[0],\n      h: plot.grid_dims[1],\n      i: plot.id,\n    };\n  }\n\n  generateDOM(layouts, plots) {\n    return _.map(layouts, function(l, i) {\n      return <div key={plots[i].id}><PlotCard plot={plots[i]}/></div>\n    });\n  }\n\n  onBreakpointChange = (breakpoint) => {\n    document.dispatchEvent(new CustomEvent(\"plotResize\", {detail: {id: \"all\"}}))\n  };\n\n  onResizeStop = (layouts, finalL, initL) => {\n    document.dispatchEvent(new CustomEvent(\"plotResize\", {detail: {id: initL.i, higher: finalL.h > initL.h}}))\n  }\n\n  shouldComponentUpdate = (newProps) => {\n\n    if( !this._plotsInLayout ) return true\n\n    const isDifferentTab = newProps.active.tab != this.props.active.tab\n    let hasDifferentPlots;\n    if (!isDifferentTab){\n      let tab = _.find(this.props.tabs, [\"id\", this.props.active.tab])\n      let newTab = _.find(newProps.tabs, [\"id\", newProps.active.tab])\n\n      if (!tab || !newTab) return true\n      else if (!tab.layouts || !newTab.layouts) return true\n      else if (_.isEqual(tab.layouts, newTab.layouts)) return true\n      else if (! _.isEqual(this._plotsInLayout, newTab.plots)) return true\n\n      hasDifferentPlots = ! _.isEqual(tab.plots, newTab.plots)\n    }\n    \n    return isDifferentTab || hasDifferentPlots\n  }\n\n  onLayoutChange = (layout, layouts) => {\n    this.props.onLayoutChange(layout, layouts);\n\n    PythonApi.setTabLayouts(this.props.active.tab, layouts, (tabs) => {\n      this.props.setSessionTabs(tabs)\n    })\n  };\n\n  onDrop = (elemParams) => {\n    alert(`Element parameters: ${JSON.stringify(elemParams)}`);\n  };\n\n  getLayout = () => {\n    if (!this.props.active.tab ) return this.noTabsMessage()\n\n    let tab = _.find(this.props.tabs, [\"id\", this.props.active.tab])\n\n    if (!tab) return this.noTabsMessage()\n    if (tab.plots.length == 0) return this.noPlotsMessage()\n    \n    let plots = tab.plots.map(plotID => this.props.plots[plotID])\n\n    plots = plots.filter( plot => plot)\n\n    // Wait for all plots to draw a first layout\n    // THIS IS KEY in order to avoid the layout going crazy\n    if (plots.length != tab.plots.length) return null\n\n    let layouts = {lg: tab.layouts.lg }\n\n    if (layouts.lg.length != plots.length){\n      layouts.lg = plots.map(plot => {\n        let layout = _.find(layouts.lg, [\"i\", plot.id])\n        return layout || PlotDashboard.newPlotLayout(plot, layouts)\n      })\n    }\n\n    this._plotsInLayout = tab.plots\n\n    console.warn(plots)\n\n    return (\n      <ResponsiveReactGridLayout\n        {...this.props}\n        layouts={layouts}\n        onBreakpointChange={this.onBreakpointChange}\n        onLayoutChange={this.onLayoutChange}\n        onDrop={this.onDrop}\n        onResizeStop={this.onResizeStop}\n        // WidthProvider option\n        measureBeforeMount={false}\n        // I like to have it animate on mount. If you don't, delete `useCSSTransforms` (it's default `true`)\n        // and set `measureBeforeMount={true}`.\n        useCSSTransforms={this.state.mounted}\n        compactType={this.state.compactType}\n        preventCollision={!this.state.compactType}\n        rowHeight={10}\n      >\n        {this.generateDOM(layouts.lg, plots)}\n      </ResponsiveReactGridLayout>\n    )\n\n  }\n\n  render() {\n\n    // We will reuse some of the tabs hot keys handlers\n    const tabs = <Tabs/>\n    const handlers = {...this.hotKeysHandler, ..._.pick(tabs.hotKeysHandler, [\"MOVE_TO_NEXT_TAB\", \"MOVE_TO_PREVIOUS_TAB\"]) }\n\n    // eslint-disable-next-line no-unused-vars\n    return (\n      <div style={{padding: 10, ...this.props.style}} className=\"scrollView\">\n        <GlobalHotKeys keyMap={PLOTS_HOT_KEYS.global} handlers={handlers}/>\n        {this.getLayout()}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  plots: state.plots,\n  structures: state.structures,\n  tabs: state.tabs,\n  active: state.active,\n  session: state.session\n})\n\nconst mapDispatchToProps = {\n  setSessionTabs,\n  setTabPlots,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withHotKeys(PlotDashboard));","import React, { Component } from 'react'\n\nexport default class StructureTag extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {}\n    }\n\n    render() {\n\n        return (\n            <div \n                className={\"structTag \" + (this.props.struct.selected ? \"active\" : \"\")} \n                onClick={this.props.toggleStruct}\n                data-tip={this.props.struct.path}\n                data-effect=\"solid\">\n                <div>{this.props.struct.name.replace(\".fdf\", \"\")}</div>\n                <div style={{fontSize: \"0.7em\", color: \"gray\"}}>{\".../\" + this.props.struct.path.split(\"/\").slice(-2,-1)[0]}</div>\n            </div>\n        )\n    }\n}\n\n\n\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport {Button, Icon} from 'react-materialize'\nimport { setActivePage } from '../../redux/actions'\n\nimport PythonApi from '../../apis/PythonApi'\nimport NavigateButton from './NavigateButton'\n\nimport { toast } from 'react-toastify'\nimport { GlobalHotKeys } from 'react-hotkeys'\nimport { GLOBAL_HOT_KEYS } from '../../utils/hotkeys'\n\nclass Controls extends Component {\n\n    hotKeysHandler = {\n        SAVE_SESSION: () => this.saveCurrentSession(),\n        LOAD_SESSION: () => this.loadSession()\n    }\n\n    syncWithSession = (session) => {\n        document.dispatchEvent(new CustomEvent(\"syncWithSession\", {detail: {session}}))\n    }\n\n    showPage = (pageName) => {\n        this.props.setActivePage(pageName)\n    }\n\n    saveCurrentSession = () => {\n        let path = prompt(\"Please provide the path to save the session.\\n\\nRoot directory:\\n\" + this.props.session.settings.rootDir)\n        if (!path) return \n\n        PythonApi.saveSession({path}, () => {\n            toast.success(\"Session saved\", \"success\")\n        })\n    }\n\n    loadSession = () => {\n\n        let path = prompt(\"Please provide the path of the saved session.\\n\\nRoot directory:\\n\" + this.props.session.settings.rootDir)\n        if (!path) return\n\n        PythonApi.loadSession({path}, (session) => {\n            console.log(\"Session loaded\", session)\n            this.syncWithSession(session)\n        })\n    }\n\n    render() {\n\n        const margins = { marginRight: 20}\n\n        return (\n            <div style={{display: \"flex\", justifyContent: \"flex-end\", marginBottom: 10, marginTop: 10}}>\n                <GlobalHotKeys keyMap={GLOBAL_HOT_KEYS} handlers={this.hotKeysHandler}/>\n                <NavigateButton to=\"plots\" style={margins}/>\n                <NavigateButton to=\"settings\" style={margins}/>\n                <Button\n                    data-tip=\"Save session\"\n                    style={margins}\n                    floating\n                    icon={<Icon>save</Icon>} \n                    onClick={this.saveCurrentSession}\n                    className=\"yellow darken-1\" />\n                <Button\n                    data-tip=\"Load session\"\n                    style={margins}\n                    floating\n                    icon={<Icon>open_in_new</Icon>}\n                    onClick={this.loadSession}\n                    className=\"green\" />\n            </div>\n        )\n    }\n}\n\nexport class Control extends Component {\n\n    render(){\n        \n        return <Button\n                    data-tip={this.props.tooltip}\n                    style={this.props.style}\n                    floating\n                    icon={<Icon>{this.props.icon}</Icon>}\n                    onClick={this.props.onClick}\n                    className={this.props.className} />\n    }\n}\n\nconst mapStateToProps = state => ({\n    session: state.session\n})\n\nconst mapDispatchToProps = {\n    setActivePage\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Controls);\n","import React, { Component } from 'react'\nimport { Control } from './Controls'\nimport { connect } from 'react-redux'\nimport { setActivePage } from '../../redux/actions'\n\nconst ROUTES = {\n    settings: {\n        icon: \"settings\",\n        color: \"grey\",\n        hotKey: \"Shift + s\"\n    },\n    plots: {\n        icon: \"tv\",\n        color: \"grey\",\n        hotKey: \"Shift + d\"\n    }\n}\n\nclass NavigateButton extends Component {\n\n    showPage = () => {\n        this.props.setActivePage(this.props.to)\n    }\n\n    render() {\n\n        const route = ROUTES[this.props.to]\n\n        return <Control \n            icon={route.icon} \n            className={route.color}\n            tooltip={\"Go to \" + this.props.to + \" (\" + route.hotKey + \")\"}\n            onClick={this.showPage}\n            {...this.props}/>\n    }\n}\n\nconst mapDispatchToProps = {\n    setActivePage\n}\n\nexport default connect(null, mapDispatchToProps)(NavigateButton);\n","import React, { Component } from 'react'\n\nexport default class PlotableTag extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {}\n    }\n\n    render() {\n\n        return (\n            <div \n                className={\"plotableTag \" + (this.props.plotable.selected ? \"active\" : \"\")} \n                onClick={this.props.togglePlotable}\n                data-tip={this.props.plotable.path}\n                data-effect=\"solid\">\n                <div>{this.props.plotable.name}</div>\n                <div style={{fontSize: \"0.7em\", color: \"gray\"}}>{\".../\" + this.props.plotable.path.split(\"/\").slice(-2,-1)[0]}</div>\n            </div>\n        )\n    }\n}\n\n","import React, { Component } from 'react'\nimport StructureTag from './StructureTag'\nimport _ from \"lodash\"\nimport { setActiveStructs, setActivePlotables } from '../../redux/actions'\n\nimport {Icon, TextInput} from 'react-materialize'\n\nimport { connect } from 'react-redux'\nimport NavigateButton from '../controls/NavigateButton'\nimport PlotableTag from './PlotableTag'\n\nfunction wildTest(wildcard, str) {\n    const re = new RegExp(`^${wildcard.replace(/\\*/g,'.*').replace(/\\?/g,'.')}$`,'i');\n    return re.test(str); // remove last 'i' above to have case sensitive\n}\n\nexport class StructurePicker extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            searchString: \"\",\n            alphabeticSorting: false,\n            selectedSorting: false,\n            searchByFolder: false,\n            displayStructures: true,\n            displayPlotables: false,\n        }\n\n    }\n\n    togglePlotInitializer = (selectedStructs, selectedPlotables) => {\n\n        let forceShow, forceHide;\n\n        console.warn([...selectedStructs, ...selectedPlotables])\n\n        if ([...selectedStructs, ...selectedPlotables].length != 0){\n            forceShow = true\n        } else {\n            forceHide = true\n        }\n\n        document.dispatchEvent(new CustomEvent(\"togglePlotInitializer\", {detail: {forceShow, forceHide}}))\n\n    }\n\n    selectStructs = (structs) => {\n        this.props.setActiveStructs(structs)\n        this.togglePlotInitializer(structs, this.selectedPlotables)\n    }\n\n    get selectedStructs(){\n        return this.props.activeStructs || []\n    }\n\n    selectPlotables = (plotables) => {\n        this.props.setActivePlotables(plotables)\n        this.togglePlotInitializer(this.selectedStructs, plotables)\n    }\n\n    get selectedPlotables(){\n        return this.props.activePlotables || []\n    }\n\n    toggleStruct = ({id: structID}) => {\n        \n        //this.setState({selectedStructures: _.xor(this.selectedStructs, [structID])})\n\n        this.selectStructs(_.xor(this.selectedStructs, [structID]))\n      \n    }\n\n    togglePlotable = ({id: plotableID}) => {\n        \n        //this.setState({selectedPlotableures: _.xor(this.selectedPlotables, [PlotableID])})\n\n        this.selectPlotables(_.xor(this.selectedPlotables, [plotableID]))\n      \n    }\n\n    toggleStructDisplay = () => {\n        this.setState({displayStructures: !this.state.displayStructures})\n    }\n\n    togglePlotablesDisplay = () => {\n        this.setState({displayPlotables: !this.state.displayPlotables})\n    }\n\n    toggleAlphabeticSorting = () => {\n\n        const toggles = { [false]: \"asc\", asc: \"desc\", desc: false}\n        this.setState({alphabeticSorting: toggles[this.state.alphabeticSorting]})\n    }\n\n    toggleSearchByFolder = () => {\n\n        this.setState({searchByFolder: !this.state.searchByFolder})\n    }\n\n    toggleSelectedSorting = () => {\n        this.setState({selectedSorting: !this.state.selectedSorting})\n    }\n\n    toggleAll = () => {\n\n        const onDisplay = Object.keys(this.filterStructs())\n\n        const onDisplaySelected = _.intersection([...this.selectedStructs, ...this.selectedPlotables], onDisplay).length == 0\n\n        const displayedStructs = _.intersection(Object.keys(this.props.structures), onDisplay)\n        const displayedPlotables = _.intersection(Object.keys(this.props.plotables), onDisplay)\n\n        this.selectStructs(onDisplaySelected ? \n            [...displayedStructs, ...this.selectedStructs] \n                : \n            this.selectedStructs.filter( structID => !displayedStructs.includes(structID) )\n        )\n\n        this.selectPlotables(onDisplaySelected ? \n            [...displayedPlotables, ...this.selectedPlotables] \n                : \n            this.selectedPlotables.filter( plotableID => !displayedPlotables.includes(plotableID) )\n        )\n\n    }\n\n    filterStructs = (searchString) => {\n\n        searchString = searchString || this.state.searchString\n\n        searchString = searchString.includes(\"*\") || searchString.includes(\"?\") ? searchString : \"*\"+searchString+\"*\"\n\n        let structs = {}\n\n        let toggles = [this.state.displayStructures, this.state.displayPlotables]\n        let objs = [this.props.structures, this.props.plotables]\n\n        //Filter both structures and plotables\n        objs.forEach( (object, index) => {\n\n            if (!toggles[index]) return\n\n            const isPlotable = index == 1\n\n            let newStructs = Object.keys(object).reduce( (structs, structID) => {\n\n                const struct = object[structID]\n    \n                const toTest = this.state.searchByFolder ? struct.path.split(\"/\").slice(-2,-1)[0] : struct.name.replace(\".fdf\", \"\")\n    \n                if (wildTest(searchString, toTest)){\n    \n                    structs[structID] = { \n                        ...struct,\n                        selected: [...this.selectedStructs, ...this.selectedPlotables].includes(structID),\n                        isPlotable,\n                        id: structID,\n                    }\n                }\n    \n                return structs\n            }, {})\n\n            structs = {...structs, ...newStructs}\n\n        })\n\n        return structs\n\n    }\n\n    newSearchString = (searchString) => {\n\n        this.setState({searchString: searchString})\n    }\n\n    noStructuresMessage = () => {\n\n        return <div>\n            <div style={{color: \"darkred\"}}>No structures in the search scope right now.</div>\n            <div>Try to change file system settings or initialize the GUI from a different directory</div>\n            <NavigateButton to=\"settings\" style={{marginTop: 10}}/>\n        </div>\n    }\n\n    noMatchingStructuresMessage = () => {\n        return <div>\n            <div style={{color: \"darkred\"}}>No structure that matches your search.</div>\n            <div>Try to change file system settings or initialize the GUI from a different directory</div>\n            <NavigateButton to=\"settings\" style={{marginTop: 10}}/>\n        </div>\n    }\n\n    render() {\n\n        let structsAndPlotables = this.filterStructs()\n\n        if (this.state.alphabeticSorting){\n            structsAndPlotables = _.orderBy(structsAndPlotables, \"name\", this.state.alphabeticSorting)\n        }\n        if (this.state.selectedSorting){\n            structsAndPlotables = _.orderBy(structsAndPlotables, \"selected\", \"desc\")\n        }\n        \n        return (\n            <div style={{height: \"100vh\", overflow: \"hidden\", display: \"flex\", flexDirection: \"column\"}}>\n                <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", alignItems: \"center\"}}>\n                    <TextInput\n                        noLayout\n                        autocomplete=\"off\"\n                        style={{marginBottom:0}}\n                        value={this.state.searchString} \n                        onChange={(e) => this.newSearchString(e.target.value)}/>\n                    <div style={{width: 20}}/>\n                    <div\n                        data-tip=\"Search by folder\"\n                        className={\"structPickerToggle \" + (this.state.searchByFolder ? \"active\" : \"\")}\n                        onClick={this.toggleSearchByFolder} style={{cursor: \"pointer\"}}><Icon>folder</Icon></div>\n                </div>\n                <div style={{display: \"flex\", justifyContent: \"space-between\", marginBottom: 5}}>\n                    <span\n                        data-tip=\"Show structures\"\n                        className={\"structPickerToggle \" + (this.state.displayStructures ? \"active\" : \"\")} \n                        onClick={this.toggleStructDisplay} style={{cursor: \"pointer\"}}>Struct</span>\n                    <span\n                        data-tip=\"Show plotables\"\n                        className={\"structPickerToggle \" + (this.state.displayPlotables ? \"active\" : \"\")}\n                        onClick={this.togglePlotablesDisplay} style={{cursor: \"pointer\"}}>Plotables</span>\n                </div>\n                <div style={{display: \"flex\", justifyContent: \"space-between\", marginBottom: 5}}>\n                    <span \n                        className={\"structPickerToggle \" + (this.state.alphabeticSorting ? \"active\" : \"\")} \n                        onClick={this.toggleAlphabeticSorting} style={{cursor: \"pointer\"}}>A-Z</span>\n                    <span\n                        data-tip=\"Show selected first\"\n                        className={\"structPickerToggle \" + (this.state.selectedSorting ? \"active\" : \"\")}\n                        onClick={this.toggleSelectedSorting} style={{cursor: \"pointer\"}}>sel</span>\n                    <span \n                        className=\"structPickerToggle\" \n                        onClick={this.toggleAll} style={{cursor: \"pointer\"}}>All</span>\n                </div>\n\n                {Object.keys({...this.props.structures, ...this.props.plotables}).length == 0 ? \n                    this.noStructuresMessage() : Object.values(structsAndPlotables).length == 0 ? \n                        this.noMatchingStructuresMessage() : null\n                }\n\n                <div className=\"scrollView\" style={{flex:1}}>\n                    {Object.values(structsAndPlotables).map(obj => {\n                        if (obj.isPlotable) {\n                            return <PlotableTag id={obj.id} \n                                plotable={obj} \n                                togglePlotable={ () => this.togglePlotable(obj)}\n                            />\n                        } else {\n                            return <StructureTag id={obj.id} \n                                struct={obj} \n                                toggleStruct={ () => this.toggleStruct(obj)}\n                            />\n                        }\n                        \n                    })}\n                </div>  \n            </div>\n            \n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    activeStructs: state.active.structs,\n    activePlotables: state.active.plotables,\n    plotables: state.plotables,\n})\n\nconst mapDispatchToProps = {\n    setActiveStructs,\n    setActivePlotables\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StructurePicker);\n","import { CLEAR_SESSION, SET_SESSION, CHANGE_SESSION_SETTINGS} from '../actions/actionTypes'\nimport _ from \"lodash\"\n\nconst defaultState = {}\n\nconst session = (state = defaultState, action) => {\n\n    switch (action.type) {\n        case SET_SESSION:\n            console.log(\"REDUX: Setting current session...\")\n            var newState = action.session\n            console.log(newState)\n\n            return newState\n        \n        case CHANGE_SESSION_SETTINGS:\n            console.log(\"REDUX: Changing current session settings (not submitting yet)...\")\n            var newState = {\n                ...state,\n                settings: {\n                    ...state.settings,\n                    [action.settingKey]: action.value\n                }\n            }\n            console.log(newState)\n            return newState\n\n        \n        case CLEAR_SESSION:\n            return defaultState\n\n        default:\n            return state\n    }\n}\n\nexport default session","import { ADD_PLOTS, CLEAR_SESSION, REMOVE_PLOT } from '../actions/actionTypes'\nimport _ from \"lodash\"\n\nconst defaultState = {};\n\nconst plots = (state = defaultState, action) => {\n    switch (action.type) {\n        case ADD_PLOTS:\n            console.log(\"REDUX: Storing a new plot...\")\n            let newState = {\n                ...state,\n                ...action.newPlots,\n            }\n            console.log(newState)\n            return newState\n        \n        case REMOVE_PLOT:\n            return _.omit(state, [action.plotID])\n        \n        case CLEAR_SESSION:\n            return defaultState\n            \n        default:\n            return state\n    }\n}\n\nexport default plots","import { SET_STRUCTURES, CLEAR_SESSION } from '../actions/actionTypes'\n\nconst defaultState = {}\n\nconst structures = (state = defaultState, action) => {\n    switch (action.type) {\n        case SET_STRUCTURES:\n            console.log(\"REDUX: Setting the new structures...\")\n            let newState = {\n                ...action.newStructures\n            }\n            console.log(newState)\n            return newState\n\n        default:\n            return state\n    }\n}\n\nexport default structures","import { CLEAR_SESSION, SET_SESSION_TABS, SET_TAB_PLOTS} from '../actions/actionTypes'\nimport _ from \"lodash\"\n\nconst defaultState = []\n\nconst tabs = (state = defaultState, action) => {\n\n    switch (action.type) {\n        case SET_SESSION_TABS:\n            console.log(\"REDUX: Setting session tabs...\")\n            var newState = action.tabs\n            console.log(newState)\n\n            return newState\n        \n        case SET_TAB_PLOTS:\n            console.log(\"REDUX: Setting tab plots...\")\n            const iTab = _.findIndex(state, [\"id\", action.tabID])\n\n            var newState = _.cloneDeep(state)\n\n            newState[iTab] = {...state[iTab], plots: action.plots}\n            \n            console.log(newState)\n            return newState\n\n        case CLEAR_SESSION:\n            return defaultState\n\n        default:\n            return state\n    }\n}\n\nexport default tabs","import { \n    SET_ACTIVE_PLOT,\n    SET_ACTIVE_TAB,\n    CLEAR_SESSION,\n    CHANGE_PLOT_SETTINGS,\n    SET_ACTIVE_STRUCTS,\n    SET_ACTIVE_PLOTABLES,\n    DEACTIVATE_STRUCT,\n    SET_ACTIVE_PAGE,\n    DEACTIVATE_PLOTABLE,\n    SET_STRUCTURES,\n    SET_PLOTABLES\n} from '../actions/actionTypes'\n\nimport _ from \"lodash\"\n\nconst defaultState = {plot: undefined, tab: undefined, structs: [], plotables:[], page: \"plots\"};\n\nconst active = (state = defaultState, action) => {\n    switch (action.type) {\n        case SET_ACTIVE_PLOT:\n            console.log(\"REDUX: Setting active plot...\")\n            var newState = {\n                ...state,\n                plot: action.activePlot,\n            }\n            console.log(newState)\n            return newState\n        \n        case CHANGE_PLOT_SETTINGS:\n            console.log(\"REDUX: Changing plot settings (not submitting yet)...\")\n            var newState = {\n                ...state,\n                plot: {\n                    ...state.plot,\n                    settings: {\n                        ...state.plot.settings,\n                        [action.settingKey]: action.value\n                    }\n                },\n            }\n            console.log(newState)\n            return newState\n\n        case SET_ACTIVE_TAB:\n            console.log(\"REDUX: Setting active tab...\")\n            var newState = {\n                ...state,\n                tab: action.activeTab,\n            }\n            console.log(newState)\n            return newState\n        \n        case SET_ACTIVE_STRUCTS:\n            \n            var newState = {\n                ...state,\n                structs: action.structs,\n            }\n\n            return newState\n        \n        case SET_STRUCTURES:\n\n            return { ...state, structs: []}\n        \n        case DEACTIVATE_STRUCT:\n\n            let structsToDeactivate = Array.isArray(action.structID) ? action.structID : [action.structID]\n\n            var newState = {\n                ...state,\n                structs: state.structs.filter( structID => !structsToDeactivate.includes(structID) ),\n            }\n\n            return newState\n        \n        case SET_ACTIVE_PAGE:\n\n            var newState = {\n                ...state,\n                page: action.pageName,\n            }\n\n            return newState\n        \n        case SET_ACTIVE_PLOTABLES:\n        \n            var newState = {\n                ...state,\n                plotables: action.plotables,\n            }\n\n            return newState\n        \n        case SET_PLOTABLES:\n\n            return { ...state, plotables: [] }\n        \n        case DEACTIVATE_PLOTABLE:\n\n            let plotablesToDeactivate = Array.isArray(action.plotableID) ? action.plotableID : [action.plotableID]\n    \n            var newState = {\n                ...state,\n                plotables: state.plotables.filter( plotableID => !plotablesToDeactivate.includes(plotableID) ),\n            }\n\n            return newState\n        \n        case CLEAR_SESSION:\n            return defaultState\n                \n        default:\n            return state\n    }\n}\n\nexport default active","import { \n    START_LOADING_PLOT,\n    END_LOADING_PLOT\n} from '../actions/actionTypes'\n\nimport _ from 'lodash';\n\nconst loading = (state = {plots:{}}, action) => {\n    switch (action.type) {\n        case START_LOADING_PLOT:\n            console.log(\"REDUX: Setting active plot...\")\n            var newState = {\n                ...state,\n                plots: {\n                    ...state.plots,\n                    [action.plot.id]: {\n                        ...action.plot,\n                        from: new Date()\n                    }\n                }\n            }\n            console.log(newState)\n            return newState\n        \n        case END_LOADING_PLOT:\n            console.log(\"REDUX: Changing plot settings (not submitting yet)...\")\n            var newState = {\n                ...state,\n                plots: _.omit(state.plots, [action.plotID]),\n            }\n            console.log(newState)\n            return newState\n                \n        default:\n            return state\n    }\n}\n\nexport default loading","import { SET_PLOTABLES, CLEAR_SESSION } from '../actions/actionTypes'\n\nconst defaultState = {}\n\nconst plotables = (state = defaultState, action) => {\n    switch (action.type) {\n        case SET_PLOTABLES:\n            console.log(\"REDUX: Setting the new plotables...\")\n            let newState = {\n                ...action.newPlotables\n            }\n            console.log(newState)\n            return newState\n\n\n        default:\n            return state\n    }\n}\n\nexport default plotables","import storage from \"redux-persist/lib/storage\"\nimport { persistReducer } from 'redux-persist';\nexport function persist(key, whitelist, reducer) {\n    return persistReducer({\n        key,\n        storage,\n        whitelist,\n    }, reducer);\n}","import { combineReducers } from 'redux'\nimport {createResponsiveStateReducer} from 'redux-responsive'\n\nimport session from './session'\nimport plots from './plots'\nimport structures from './structures'\nimport tabs from './tabs'\nimport active from './active'\nimport loading from './loading'\nimport plotables from './plotables'\nimport { persist } from './persist'\n\nexport default combineReducers({\n    session,\n    plots,\n    structures,\n    plotables,\n    tabs,\n    loading: persist('loading', ['plots'], loading),\n    active: persist( 'active', ['tab', 'plot'], active),\n    browser: createResponsiveStateReducer({\n        small: 600,\n        medium: 992,\n    })\n})\n\nexport const selectActiveStructs = (state) => {\n    return state.active.structs.map(structID => state.structures[structID])\n}\n\nexport const selectActivePlotables = (state) => {\n    return state.active.plotables.map(plotableID => state.plotables[plotableID])\n}","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport {Row} from 'react-materialize'\nimport Select from 'react-select'\n\nimport _ from \"lodash\"\nimport PythonApi from '../../apis/PythonApi'\n\nclass PlotTypePicker extends Component {\n\n    constructor(props){\n        super(props)\n        this.state={}\n    }\n\n    componentDidMount(){\n        //Get the available plots\n        PythonApi.getPlotOptions( plotOptions => this.setState({plotOptions}) )\n    }\n\n    render() {\n\n        const value = _.find(this.state.plotOptions, [\"value\", this.props.value])\n\n        return (\n            <Select\n                options={this.state.plotOptions}\n                placeholder=\"Choose the plot type...\"\n                isClearable isSearchable isMulti\n                onChange={(obj) => this.props.onChange(obj ? obj.value || obj.map(selected => selected.value) : undefined)}\n                value={value}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tabs: state.tabs,\n    active: state.active\n})\n\nconst mapDispatchToProps = {\n\n}\n\nexport default connect(mapStateToProps, null)(PlotTypePicker);","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport {Row} from 'react-materialize'\nimport Select from 'react-select'\n\nimport _ from \"lodash\"\n\nclass TabPicker extends Component {\n    render() {\n\n        const options = this.props.tabs.map( (tab) => ({label: tab.name, value: tab.id }))\n        const value = _.find(options, [\"value\", this.props.value])\n        return (\n            <Select\n                placeholder=\"Choose a tab...\"\n                options={options}\n                defaultValue={this.props.active.tab && _.find(this.props.tabs, [\"id\", this.props.active.tab])? {label: _.find(this.props.tabs, [\"id\", this.props.active.tab]).name, value: this.props.active.tab } : null}\n                isSearchable\n                onChange={(obj) => this.props.onChange(obj ? obj.value : undefined)}\n                value={value}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    tabs: state.tabs,\n    active: state.active\n})\n\nconst mapDispatchToProps = {\n\n}\n\nexport default connect(mapStateToProps, null)(TabPicker);\n","import React, { Component } from 'react'\nimport Icon from 'react-materialize/lib/Icon'\nimport { connect } from 'react-redux'\nimport { deactivateStruct, setActiveStructs } from '../../redux/actions'\n\nclass StructureRow extends Component {\n\n    render() {\n\n        const struct = this.props.structure\n        const groupActive = this.props.groupActive\n\n        return (\n            <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"flex-start\", alignItems: \"center\", marginTop: 10, marginBottom: 10}}>\n                <div \n                    style={{color: \"darkred\", cursor: \"pointer\", display: \"flex\", justifyContent: \"center\", alignItems:\"center\"}}\n                    onClick={() => this.props.deactivateStruct(struct.id)}>\n                    <Icon>remove</Icon>\n                </div>\n                <div \n                    style={{cursor: groupActive ? \"default\" : \"pointer\", marginRight: 20, marginLeft: 20, padding: 10, backgroundColor: groupActive ? \"whitesmoke\" : \"#ccc\", borderRadius: 3}}\n                    onClick={groupActive ? undefined : this.props.moveStructToActiveGroup}>\n                    {struct.name.replace(\".fdf\", \"\")}\n                </div>\n                <div data-tip={struct.path}>{\".../\" + struct.path.split(\"/\").slice(-2,-1)[0]}</div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    active: state.active\n})\n\nconst mapDispatchToProps = {\n    deactivateStruct,\n    setActiveStructs\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StructureRow);\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport Select from 'react-select'\n\nimport _ from \"lodash\"\n\nconst OPTIONS = [\n    {label: \"Plot individually\", value:\"separatePlot\"},\n    {label: \"Merge in single plot\", value:\"jointPlot\"},\n    {label: \"Build animation\", value:\"jointAnimation\"},\n    {label: \"Animation for each\", value:\"separateAnimation\"},\n]\n\nclass MergeMethodPicker extends Component {\n\n    constructor(props){\n        super(props)\n        this.state={}\n    }\n\n    render() {\n        return (\n            <Select\n                options={OPTIONS}\n                defaultValue={OPTIONS[0]}\n                placeholder=\"Choose the plotting method...\"\n                isSearchable\n                onChange={(obj) => this.props.onChange(obj ? obj.value || obj.map(selected => selected.value) : undefined)}\n                value={_.find(OPTIONS, [\"value\", this.props.value])}\n            />\n                \n        )\n    }\n}\n\nconst mapStateToProps = state => ({})\n\nconst mapDispatchToProps = {\n\n}\n\nexport default connect(mapStateToProps, null)(MergeMethodPicker);","import React, { Component } from 'react'\nimport PlotTypePicker from './PlotTypePicker'\nimport TabPicker from './TabPicker'\nimport StructureRow from './StructureRow'\nimport MergeMethodPicker from './MergeMethodPicker'\nimport { deactivateStruct } from '../../redux/actions'\nimport { connect } from 'react-redux'\n\nclass StructuresGroup extends Component {\n\n    render() {\n\n        const {tabID, plotClasses, mergeMethod} = this.props.initializingOptions\n        const activenessStyles = this.props.active ? {\n            backgroundColor: \"#ccc\"\n        } : {\n            backgroundColor: \"whitesmoke\"\n        }\n\n        return (\n            <div>\n                <div style={{display: \"flex\", flexDirection: \"row\"}}>\n                    <div className=\"structGroupAction\" style={activenessStyles} onClick={this.props.splitGroup}>Split</div>\n                    <div className=\"structGroupAction\" style={activenessStyles} onClick={this.props.removeGroup}>Remove</div>\n                    {this.props.active ? \n                        null\n                            : \n                        <div className=\"structGroupAction\" style={activenessStyles} onClick={this.props.setGroupAsActive}>Mark as receptive</div>\n                    }\n                    <div style={{flex:1}}/>\n                </div>\n                <div className=\"row\" style={{transition: \"all 300ms\", display:\"flex\", flexWrap: \"wrap\", padding: 20, marginTop: 0, marginBottom: 20, borderRadius: 5, borderTopLeftRadius: 0, justifyContent: \"center\", alignItems: \"center\", ...activenessStyles}}>\n                    <div className=\"col s12 m4 l3\">\n                        {this.props.structs.map(struct => <StructureRow structure={struct} groupActive={this.props.active} moveStructToActiveGroup={() => this.props.moveStructToActiveGroup(struct.id)}/>)}\n                    </div>\n                    <div className=\"col s12 m4 l3\">\n                        <PlotTypePicker value={plotClasses} onChange={(val) => this.props.onInitParamChange(\"plotClasses\", val) }/>\n                    </div>\n                    <div className=\"col s12 m4 l3\">\n                        <TabPicker value={tabID} onChange={(val) => this.props.onInitParamChange(\"tabID\", val) }/>\n                    </div>\n                    <div className=\"col s12 m4 l3\">\n                        <MergeMethodPicker value={mergeMethod} onChange={(val) => this.props.onInitParamChange(\"mergeMethod\", val) }/>\n                    </div>\n                </div>\n            </div>      \n        )\n    }\n}\n\nconst mapStateToProps = state => ({})\n\nconst mapDispatchToProps = {\n    deactivateStruct\n}\n\nexport default connect(null, mapDispatchToProps)(StructuresGroup);","import React, { Component } from 'react'\n\nimport _ from \"lodash\"\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { Card, Icon} from 'react-materialize'\n\nimport PythonApi from '../../apis/PythonApi'\n\nimport { connect } from 'react-redux'\nimport { selectActiveStructs, selectActivePlotables } from '../../redux/reducers'\nimport { setActiveTab, addPlots, setActiveStructs, informLoadingPlot, informLoadedPlot, deactivateStruct, deactivatePlotable, setActivePlotables } from '../../redux/actions'\nimport StructuresGroup from './StructuresGroup';\n\nclass PlotInitializer extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            structureGroups: [],\n            plotables: [],\n        }\n        \n    }\n\n    get selectedStructs(){\n        return this.props.activeStructs || []\n    }\n\n    get selectedPlotables(){\n        return this.props.activePlotables || []\n    }\n\n    get defaultTabID(){\n        return this.props.active.tab ? this.props.active.tab : this.props.tabs.length && this.props.tabs.length > 0 ? this.props.tabs[0].id : undefined\n    }\n\n    componentDidMount(){\n\n        this.onStructsUpdate([])\n\n    }\n\n    componentWillUnmount(){\n\n    }\n\n    componentDidUpdate(prevProps) {\n\n        if ( !_.isEqual(prevProps.active.structs, this.props.active.structs) ){\n\n            this.onStructsUpdate(prevProps.active.structs)\n            \n        }\n    }\n\n    onStructsUpdate = (prevActiveStructs) => {\n\n        let structureGroups = [];\n\n        const newStructs = this.selectedStructs.filter(({id:structID}) => !prevActiveStructs.includes(structID))\n\n        if (this.state.structureGroups.length == 0){\n            //In this case build a new group and mark it as active\n            structureGroups = this.markActiveGroup(0, [this.newGroup(this.selectedStructs)])\n        } else {\n            const activeGroupIndex = _.findIndex(this.state.structureGroups, \"active\" )\n            const activeGroup = this.state.structureGroups[activeGroupIndex]\n\n            //Add the structure to the receptive group\n            structureGroups = [\n                ...this.state.structureGroups.slice(0,activeGroupIndex),\n                {...activeGroup, structs: [...activeGroup.structs, ...newStructs]},\n                ...this.state.structureGroups.slice(activeGroupIndex + 1)\n            ]\n        }\n\n        structureGroups = this.cleanUnselectedFromGroups(structureGroups)\n\n        //Ensure that there is an active group\n        if ( !_.find(structureGroups, \"active\") ){\n            structureGroups = this.markActiveGroup(structureGroups.length - 1, structureGroups)\n        }\n\n        this.setState({structureGroups})\n    }\n\n    cleanUnselectedFromGroups = (groups) => {\n        /* Removes unselected structures */\n        return groups.reduce((cleanGroups, group) => {\n            group = {...group, structs: group.structs.filter(({id: structID}) => this.props.active.structs.includes(structID))}\n\n            if (group.structs.length > 0){\n                cleanGroups.push(group)\n            }\n            \n            return cleanGroups\n        },[])\n    }\n\n    newGroup = (structs, groupParams) => {\n\n        return {\n            structs: structs || [],\n            initializingOptions: {tabID: this.defaultTabID, plotClasses: [], mergeMethod: \"separatePlot\"},\n            ...groupParams\n        }\n    }\n\n    addGroup = ({structs}) => {\n\n        const structureGroups = this.markActiveGroup(this.state.structureGroups.length,\n            [...this.state.structureGroups, this.newGroup(structs)])\n\n        this.setState({structureGroups})\n    }\n\n    removeGroup = (iGroup) => {\n\n        const group = this.state.structureGroups[iGroup]\n        \n        if (group.structs.length > 0){\n\n            //We need to deactivate all structures in the group, this will automatically update groups\n            this.props.deactivateStruct(group.structs.map(struct => struct.id))\n        } else {\n            //If no structures in the group, we just delete it\n\n            let structureGroups = this.state.structureGroups.filter((g, i) => i != iGroup)\n\n            if (group.active){\n                structureGroups = this.markActiveGroup(structureGroups.length - 1, structureGroups)\n            }\n\n            this.setState({structureGroups})\n        }\n        \n    }\n\n    splitGroup = (iGroup) => {\n        const group = this.state.structureGroups[iGroup]\n\n        const splitted = group.structs.map( struct => this.newGroup([struct], _.omit(group, [\"structs\"])) )\n\n        //Remove the old group\n        let structureGroups = this.state.structureGroups.filter( (g, i) => i != iGroup)\n\n        //Add the new ones\n        structureGroups = [...structureGroups.slice(0,iGroup), ...splitted, ...structureGroups.slice(iGroup) ]\n\n        //If it was the active group, we can't leave all groups as active!\n        if (group.active) structureGroups = this.markActiveGroup(iGroup, structureGroups)\n\n        this.setState({structureGroups})\n\n    }\n\n    markActiveGroup = (iGroup, groups) => {\n        groups = groups || this.state.structureGroups\n        \n        return groups.map((group, i) => {\n            return {...group, active: i == iGroup}\n        })\n    }\n\n    setGroupAsActive = (iGroup) => {\n        this.setState({structureGroups: this.markActiveGroup(iGroup)})\n    }\n\n    moveStructToActiveGroup = (structID) => {\n        \n        //Get the structure\n        const struct = _.find(this.selectedStructs, [\"id\", structID])\n\n        //Remove the structure from its actual group and move it to the active group\n        //THIS WILL BE A PROBLEM IF AT SOME POINT THE SAME STRUCTURE IS ALLOWED IN TWO GROUPS AT THE SAME TIME\n        //WE SHOULD THEN SPECIFY THE ORIGIN GROUP!!!!!!!!!!!!!!\n        const structureGroups = this.state.structureGroups.map( group => {\n\n            let structs = group.active ? [...group.structs, struct] : group.structs.filter( ({id}) => id != structID)\n            \n            return {...group, structs}\n        })\n\n        this.setState({structureGroups})\n\n    }\n\n    updateGroupInitParams = (iGroup, key, val) => {\n\n        const structureGroups = this.state.structureGroups.map((group, i) => {\n            return i == iGroup ? {...group, initializingOptions: {...group.initializingOptions, [key]: val}}: group\n        })\n\n        this.setState({structureGroups})\n    }\n\n    toggleVisibility = () => {\n\n        document.dispatchEvent( new Event(\"togglePlotInitializer\"))\n    }\n\n    updateInitializingOptions = (key, value) => {\n        this.setState({ [key]: value})\n    }\n\n    afterPlot = (plot, reqParams, processID) => {\n\n        this.props.addPlots({[plot.id]: plot})\n\n        //this.props.setActiveTab(reqParams.tabID)\n\n        this.props.informLoadedPlot(processID)\n        document.dispatchEvent(new Event(\"newPlot\"))\n    }\n\n    getNewPlot = () => {\n\n        //Plot plotables\n        this.selectedPlotables.forEach(plotable => {\n\n            let processID = uuidv4()\n            this.props.informLoadingPlot({id: processID, name: plotable.name})\n\n            PythonApi.getNewPlot(\n                {tabID: this.defaultTabID, plotableID: plotable.id},\n                (plot, reqParams) => this.afterPlot(plot, reqParams, processID)\n            )\n        })\n\n        //Plot the structures\n        this.state.structureGroups.forEach( ({structs, initializingOptions}) =>  {\n\n            if (initializingOptions.mergeMethod.includes(\"separate\")){\n\n                const animation = initializingOptions.mergeMethod.includes(\"Animation\")\n\n                structs.forEach( struct => {\n                    \n                    initializingOptions.plotClasses.forEach( plotClass => {\n                        \n                        let processID = uuidv4()\n                        this.props.informLoadingPlot({id: processID, struct: struct, plotClass: plotClass })\n                    \n                        PythonApi.getNewPlot(\n                            {tabID: initializingOptions.tabID, structID: struct.id, animation, plotClass: plotClass},\n                            (plot, reqParams) => this.afterPlot(plot, reqParams, processID)\n                        )\n        \n                    })\n                    \n                    \n                })\n            }\n            \n        })\n\n        this.toggleVisibility()\n\n        this.props.setActiveStructs([])\n        this.props.setActivePlotables([])\n\n    }\n\n    renderPlotable = (plotable) => {\n        return <div style={{display: \"flex\", flexDirection: \"row\", alignItems: \"center\", marginTop: 10}}>\n            <div style={{color: \"darkred\", cursor: \"pointer\", display: \"flex\", justifyContent: \"center\", alignItems:\"center\"}} onClick={() => this.props.deactivatePlotable(plotable.id)}>\n                <Icon>remove</Icon>\n            </div>\n            <div style={{marginRight: 20, marginLeft: 20, padding: 10, backgroundColor: \"whitesmoke\", borderRadius: 3}}>\n                {plotable.name}\n            </div>\n            <div data-tip={plotable.path}>{\".../\" + plotable.path.split(\"/\").slice(-2,-1)[0]}</div>\n        </div> \n    }\n\n    nothingToPlotMessage = () => {\n        return <div>\n            <div style={{color: \"darkred\", fontSize: \"1.3em\", fontWeight: \"bold\"}}>There's nothing to plot currently</div>\n            <div>Select a structure or plotable to begin.</div>\n        </div>\n    }\n\n    render() {\n\n        if (this.props.tabs.length == 0) return null\n\n        let plotables = _.groupBy(this.selectedPlotables, \"plot\")\n\n        return (\n            <div className=\"plotInitializer\" style={this.props.style}>\n\n                <Card\n                    style={{marginLeft: 20, marginRight: 20, background: \"aliceblue\"}}\n                    actions={\n                        <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", alignItems: \"center\"}}>\n\n                            <a\n                                className=\"btn-flat black-text initPlotBtn\"\n                                onClick={this.toggleVisibility}>\n                                Dismiss\n                                <Icon right>close</Icon>\n                            </a>\n\n                            <a \n                                className=\"btn-flat black-text initPlotBtn\"\n                                onClick={this.getNewPlot}\n                                >\n                                Initialize plots\n                                <Icon right>done</Icon>\n                            </a>\n\n                            <a className=\"btn-flat black-text initPlotBtn\"><Icon>refresh</Icon></a>\n                        </div>     \n                    }>\n                    {this.selectedStructs.length > 0 ? <div>\n                        <div className=\"sectionHeader\">\n                            Structures\n                        </div>\n                        {this.state.structureGroups.map( (group, i) => {\n                            return <StructuresGroup \n                                {...group}\n                                onInitParamChange={(paramName, val) => this.updateGroupInitParams(i, paramName, val)}\n                                setGroupAsActive={() => this.setGroupAsActive(i)}\n                                removeGroup={() => this.removeGroup(i)}\n                                splitGroup={() => this.splitGroup(i)}\n                                moveStructToActiveGroup={this.moveStructToActiveGroup}\n                            />\n                        })}\n                        <div onClick={this.addGroup}>New Group</div>\n                    </div>: null}\n\n                    {this.selectedPlotables.length > 0 ? <div className=\"sectionHeader\">\n                        Plotables\n                    </div> : null}\n\n                    {Object.keys(plotables).map(plot => <div>\n                        <div style={{textAlign: \"left\", fontSize: \"1.1em\", marginTop: 20}}>{plot}</div>\n                        <div style={{marginLeft: 30, paddingLeft: 20, borderLeftStyle: \"solid\", borderWidth: 1, borderColor: \"#ccc\"}}>\n                            {plotables[plot].map(plotable => this.renderPlotable(plotable))}\n                        </div>\n                    </div>)}\n\n                    {[...this.selectedPlotables, ...this.selectedStructs].length == 0 ? this.nothingToPlotMessage() : null} \n\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    activeStructs: selectActiveStructs(state),\n    activePlotables: selectActivePlotables(state),\n    tabs: state.tabs,\n    active: state.active,\n})\n\nconst mapDispatchToProps = {\n    setActiveTab,\n    addPlots,\n    setActiveStructs,\n    setActivePlotables,\n    informLoadingPlot,\n    informLoadedPlot,\n    deactivateStruct,\n    deactivatePlotable\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlotInitializer);\n","import React, { Component } from 'react'\n\nimport moment from \"moment\"\nimport { informLoadedPlot } from '../../redux/actions';\n\nimport {connect} from \"react-redux\"\n\nclass LoadingChip extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            time: Date.now()\n        }\n    }\n\n    componentDidMount(){\n        this.interval = setInterval(() => this.setState({ time: Date.now() }), 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    getLoadingTime = (loadingInit) => {\n\n        return moment(moment().diff(loadingInit)).format(\"mm:ss\")\n    }\n\n    render() {\n\n        console.warn(this.props.info)\n\n        let processName = this.props.info.name\n        \n        if (!processName && this.props.info.struct){\n            processName = this.props.info.struct.name ? [this.props.info.struct.name.replace(\".fdf\", \"\"), this.props.info.plotClass].join(\" \") : \"No name\"\n        }\n        let elapsed = this.getLoadingTime(this.props.info.from)\n\n        return (\n            <div className=\"loadingChip\">\n                <span style={{paddingRight: 10}}>{processName}</span>\n                <span>{elapsed}</span>\n                <span className=\"removeTabBut\" onClick={() => this.props.informLoadedPlot(this.props.info.id)}>X</span>\n            </div>\n        )\n    }\n}\n\n\nconst mapDispatchToProps = {\n    informLoadedPlot\n}\n\nexport default connect(null, mapDispatchToProps)(LoadingChip);\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport LoadingChip from './LoadingChip'\n\nexport class LoadingTracker extends Component {\n    \n    render() {\n\n        return (\n            <div className={\"loadingTracker\" + (Object.values(this.props.loading.plots).length == 0 ? \" empty\" : \"\")}>\n                {Object.values(this.props.loading.plots).map(loadingInfo => <LoadingChip info={loadingInfo}/>)}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    loading: state.loading\n})\n\nexport default connect(mapStateToProps, null)(LoadingTracker);\n","import React, { Component } from 'react'\nimport TextInput from 'react-materialize/lib/TextInput'\n\n\nexport default class Text extends Component {\n    render() {\n\n        const value = this.props.value || \"\" \n\n        return (\n            <TextInput\n                noLayout\n                value={value}\n                onChange={(e) => this.props.onChange(e.target.value)}\n                label={this.props.setting.name}\n                {...this.props.inputField.params}/>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Switch from 'react-materialize/lib/Switch'\n\nexport default class SwitchInput extends Component {\n    render() {\n        return (\n            <div style={{display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\"}}>\n                <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n                <Switch\n                    id = {this.props.setting.key}\n                    checked={this.props.value}\n                    onChange={(e) => this.props.onChange(e.target.checked) }\n                    {...this.props.inputField.params}/>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nimport Select from \"react-select\"\n\nimport _ from 'lodash'\n\nexport default class Dropdown extends Component {\n    render() {\n        return (\n            <div style={{display:\"flex\", justifyContent:\"center\", alignItems:\"center\"}}>\n                <div style={{paddingRight: 20}}>{this.props.setting.name + \":\"}</div>\n                <div style={{flex:1}}>\n                    <Select\n                        value={ Array.isArray(this.props.value) ? this.props.value.map(val => _.find(this.props.inputField.params.options, {value: val})) : _.find(this.props.inputField.params.options, {value: this.props.value})}\n                        onChange={(obj) => this.props.onChange(Array.isArray(obj) ? obj.map(obj => obj.value) : obj ? obj.value : null )}\n                        {...this.props.inputField.params}/>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { ChromePicker } from 'react-color';\n\nexport default class ColorPicker extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state ={\n            tempcolor: undefined\n        }\n    }\n\n    toggleColorPicker = () => {\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\n    };\n    \n    render() {\n\n        let colorPicker = this.state.displayColorPicker ? (\n            <div style={{position: \"absolute\", bottom: 60}}>\n                <ChromePicker\n                    color={this.state.tempcolor || this.props.value || 'black'}\n                    onChange={(color) => {this.setState({tempcolor: color.hex})}}\n                    onChangeComplete={(color) => {this.props.onChange(color.hex); this.setState({tempcolor: undefined})}}\n                    {...this.props.inputField.params}/>\n            </div>\n        ) : null;\n\n        return (\n            <div style={{position: \"relative\",display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\"}}>\n                <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n                <div \n                    className=\"z-depth-2\"\n                    onClick={this.toggleColorPicker}\n                    style={{width: 30, height: 30, borderRadius: 30, background: this.props.value}}/>\n                \n                {colorPicker}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nimport { Range } from 'rc-slider'\nimport 'rc-slider/assets/index.css';\n\nexport default class RangeSlider extends Component {\n    render() {\n\n        const value = this.props.value || [0,0]\n\n        return (\n            <div style={{paddingLeft: \"10%\", paddingRight: \"10%\"}}>\n                <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n                <Range\n                    value={value}\n                    onChange={(value) => this.props.onChange(value)}\n                    {...this.props.inputField.params}\n                    />\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport InputField from '../InputField'\n\nexport default class Range extends Component {\n\n    render() {\n\n        const value = this.props.value != null ? this.props.value : [\"\", \"\"]\n\n        return (\n            <div>\n                <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n                <div style={{display: 'flex'}}>\n                    <input\n                        style={{marginRight: 30, flex:1}}\n                        type=\"number\"\n                        value={value[0]}\n                        onChange={(e) => value[1] >= Number(e.target.value) ? \n                            this.props.onChange( [InputField.number(e.target.value), value[1]] ) : null}\n                        {...this.props.inputField.params}/>\n                    <input\n                        style={{marginLeft: 30, flex:1}}\n                        type=\"number\"\n                        value={value[1]}\n                        onChange={(e) => Number(e.target.value) >= value[0] ? \n                            this.props.onChange( [value[0], InputField.number(e.target.value)] ) : null }\n                        {...this.props.inputField.params}/>\n                </div>\n                \n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport InputField from '../InputField'\n\nexport default class Numeric extends Component {\n    render() {\n\n        const additionalProps = this.props.inputField ? this.props.inputField.params : {}\n\n        const value = this.props.value || \"\" \n\n        return (\n            <div>\n                {this.props.setting ? <div style={{paddingBottom: 10}}>{this.props.setting.name}</div> : null}\n                <input\n                    type=\"number\"\n                    value={value}\n                    onChange={(e) => this.props.onChange( InputField.number(e.target.value) )}\n                    style = {this.props.style}\n                    {...additionalProps}/>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\n//--Components\nimport { Card, TextInput, Switch, Button } from 'react-materialize'\nimport Select from \"react-select\"\nimport { ChromePicker } from \"react-color\"\nimport { Range } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\nimport _ from \"lodash\"\nimport InputField from '../InputField';\n\nexport default class QueriesField extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            displayColorPicker: {}\n        }\n    }\n\n    toggleColorPicker = (pickerID) => {\n        this.setState({ displayColorPicker: {\n            ...this.state.displayColorPicker,\n            [pickerID] : ! this.state.displayColorPicker[pickerID]\n        } })\n    };\n\n    addQuery = () => {\n\n        let newQuery = this.props.setting.inputField.queryForm.reduce((map, queryParam) => {\n            map[queryParam.key] = queryParam.default || null\n            return map\n        }, {})\n\n        newQuery.active = true\n\n        this.props.onChange([...this.props.value, newQuery])\n    }\n\n    changeSettingValue = (iQuery, paramKey, paramValue) => {\n\n        let newValue = _.cloneDeep(this.props.value)\n\n        newValue[iQuery] = { ...newValue[iQuery], [paramKey]: paramValue}\n\n        this.props.onChange(newValue)\n    }\n\n    renderInputField = (queryParam, value, iQuery) => {\n\n        let inputField = queryParam.inputField\n\n        if (!inputField) return null\n\n        let fieldLayout;\n\n        if (inputField.type == \"textinput\"){\n\n            fieldLayout = <TextInput\n                    noLayout\n                    value={value}\n                    onChange={(e) => this.changeSettingValue(iQuery, queryParam.key, e.target.value)}\n                    label={queryParam.name}\n                    {...inputField.params}/>\n\n        } else if (inputField.type == \"switch\"){\n\n            fieldLayout = <div style={{display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\"}}>\n                    <div style={{paddingBottom: 10}}>{queryParam.name}</div>\n                    <Switch\n                        id = {iQuery+queryParam.key}\n                        checked={value}\n                        onChange={(e) => this.changeSettingValue(iQuery, queryParam.key, e.target.checked) }\n                        {...inputField.params}/>\n                </div>\n\n        } else if (inputField.type == \"dropdown\") {\n\n            fieldLayout = <div style={{display:\"flex\", justifyContent:\"center\", alignItems:\"center\"}}>\n                <div style={{paddingRight: 20}}>{queryParam.name + \":\"}</div>\n                <Select\n                        className=\"querySelect\"\n                        value={ Array.isArray(value) ? value.map(val => _.find(inputField.params.options, {value: val})) : _.find(inputField.params.options, {value: value})}\n                        onChange={(obj) => this.changeSettingValue(iQuery, queryParam.key, \n                            Array.isArray(obj) ? obj.map(obj => obj.value) : obj ? obj.value : null )}\n                        {...inputField.params}/>\n                </div>\n\n        } else if (inputField.type == \"color\") {\n\n            let pickerID = String(iQuery) + queryParam.key\n\n            let colorPicker = this.state.displayColorPicker && this.state.displayColorPicker[pickerID] ? (\n                <div style={{position: \"absolute\", bottom: 60}}>\n                    <ChromePicker\n                        color={value ? value : \"#00F0F8FF\"}\n                        onChangeComplete={(color) => this.changeSettingValue(iQuery, queryParam.key, color.hex)}\n                        {...inputField.params}/>\n                </div>\n            ) : null;\n\n            fieldLayout = <div style={{position: \"relative\",display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\"}}>\n                    <div style={{paddingBottom: 10}}>{queryParam.name}</div>\n                    <div \n                        className=\"z-depth-2\"\n                        onClick={() => this.toggleColorPicker(pickerID)}\n                        style={{width: 30, height: 30, borderRadius: 30, background: value}}/>\n                    \n                    {colorPicker}\n                </div>\n        } else if (inputField.type == \"rangeslider\"){\n\n            fieldLayout = <div style={{paddingLeft: \"10%\", paddingRight: \"10%\"}}>\n            <div style={{paddingBottom: 10}}>{queryParam.name}</div>\n            <Range\n                value={value}\n                onChange={(value) => this.changeSettingValue(iQuery, queryParam.key, value)}\n                {...inputField.params}/>\n          </div>\n\n        } else if (inputField.type == \"number\"){\n\n            fieldLayout = <div>\n                <div style={{paddingBottom: 10}}>{queryParam.name}</div>\n                <input\n                    type=\"number\"\n                    value={value}\n                    onChange={(e) => this.changeSettingValue( iQuery, queryParam.key, InputField.number(e.target.value) )}\n                    {...inputField.params}/>\n                </div>\n        }\n\n        return <div style={{marginBottom: 5, marginTop: 5, paddingLeft: 10, paddingRight: 10, width: this.props.w(inputField.width), ...inputField.style}}>{fieldLayout}</div>\n    }\n\n    renderQuery = (query, iQuery) => {\n\n        return (\n\n            <div key={iQuery} style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                <Switch\n                    id={iQuery+\"active\"}\n                    checked={query.active}\n                    onChange={(e) => this.changeSettingValue(iQuery, \"active\", e.target.checked) }/>\n                <Card className=\"queryCard\" style={{flex: 1, background: query.active ? \"#CBFFC0\" : \"#ffc3cd\", borderRadius: 10}}>\n                    <div style={{display:\"flex\", flexWrap: \"wrap\", justifyContent: \"space-around\"}}>\n                        {this.props.setting.inputField.queryForm.map(queryParam => this.renderInputField(queryParam, query[queryParam.key], iQuery))}\n                    </div>   \n                </Card>\n            </div>\n            \n        )\n\n    }\n\n    render() {\n\n        return (\n            <div>\n                <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n                <div>\n                    {this.props.value.map( (query, iQuery) => this.renderQuery(query, iQuery))}\n                    <Button\n                        data-tip=\"Add a new query\"\n                        onClick={this.addQuery}>\n                        Add Query\n                    </Button>\n                </div>\n            </div>\n            \n        )\n    }\n}\n","import React, { Component } from 'react'\nimport NumericInput from './Numeric'\n\nimport _ from \"lodash\"\n\nexport default class ArrayInput extends Component {\n\n    changeValue = (newVal, i) => {\n        const value = _.cloneDeep(this.props.value)\n\n        value[i] = newVal\n\n        this.props.onChange(value)\n    }\n\n    render() {\n\n        //Params to pass to numeric inputs\n        const orientationStyles = this.props.inputField.params.vertical ? {\n            marginLeft: 20, marginRight: 20, marginBottom: 0, width: 70\n        } : {\n            marginLeft: 5, marginRight: 5, paddingLeft: 10, marginBottom: 0, width: 50\n        }\n        const inputStyle = { ...orientationStyles, paddingLeft: 10, textAlign: \"center\", borderStyle:\"solid\", borderWidth: 1, borderColor: \"black\"}\n\n        return (\n            <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\"}}>\n                <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n                <div style={{display: \"flex\", flexDirection: this.props.inputField.params.vertical ? \"column\" : \"row\", justifyContent: \"center\", alignItems: \"center\"}} className=\"arrayContainer\">\n                    {this.props.value.map((val, i) => <NumericInput value={val} onChange={(val) => this.changeValue(val, i)} style={inputStyle}/>)}\n                </div>  \n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nimport _ from \"lodash\"\n\n//--Redux\nimport { connect } from 'react-redux'\nimport { changeSettings } from \"../../redux/actions\"\n\n/*  All the different input fields */\nimport TextInput from './inputFields/TextInput';\nimport Switch from './inputFields/Switch';\nimport Dropdown from './inputFields/Dropdown';\nimport ColorPicker from './inputFields/ColorPicker';\nimport RangeSlider from './inputFields/RangeSlider';\nimport Range from './inputFields/Range';\nimport Numeric from './inputFields/Numeric';\nimport QueriesField from './inputFields/QueriesInput';\nimport ArrayInput from './inputFields/Array';\n\nconst INPUT_FIELDS = {\n    textinput: TextInput,\n    switch: Switch,\n    dropdown: Dropdown,\n    color: ColorPicker,\n    rangeslider: RangeSlider,\n    range: Range,\n    number: Numeric,\n    queries: QueriesField,\n    vector: ArrayInput\n}\n\nclass InputField extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state ={}\n    }\n\n    w = (string) => {\n\n        if (!string) return undefined\n\n        let isSizeDefined = [\"s\", \"m\", \"l\"].map(sizeLabel => string.indexOf(sizeLabel) >= 0)\n\n        let iWindowSize = [\"small\", \"medium\", \"infinity\"].indexOf(this.props.browser.mediaType)\n\n        for (var i = iWindowSize; i > -1; i--) {\n            \n            if(isSizeDefined[i]){\n                let width = _.find(string.split(\" \"), (str) => str.indexOf([\"s\",\"m\",\"l\"][i]) >= 0)\n                return width.substr(1)\n            }\n          }\n\n        return undefined\n    }\n\n    changeSettingValue = (newValue) => {\n\n        this.props.changeSettings(this.props.onSettingChangeType, this.props.setting.key, newValue)\n        \n    }\n\n    static number = (value) => [\"\", \"-\"].includes(value) ? value : Number(value)\n\n    render() {\n\n        let inputField = this.props.setting.inputField\n\n        // Get the input field that we need\n        const InputComponent = INPUT_FIELDS[inputField.type]\n        \n        if (!InputComponent) return null\n\n        const fieldLayout = <InputComponent\n            {...this.props}\n            inputField={inputField}\n            onChange={(value) => this.changeSettingValue(value)}\n            w={this.w} //This is only needed by the queries field, maybe there is a better way to do it\n        />\n\n        let tooltipParams = {\n            \"data-tip\": (this.props.setting.help ? this.props.setting.help + \"<br>\" : \"\") + \"Default: \" + (this.props.setting.default || \"None\"),\n            \"data-multiline\": true,\n            \"data-effect\": \"solid\",\n            \"data-place\": inputField.type == \"color\" ? \"bottom\" : \"top\", \n        }\n\n        const backgroundColor = this.props.value == null ? \"rgba(230,230,230,0.4)\" : undefined\n\n        return <div\n            onClick={(e) => e.ctrlKey ? this.changeSettingValue(this.props.value == null ? this.props.setting.default : null) : null}\n            style={{backgroundColor, paddingTop: 10, paddingBottom: 10, paddingLeft: 20, paddingRight: 20, borderRadius: 3, marginTop: 20, marginBottom: 20, width: this.w(inputField.width), ...inputField.style}}\n            {...tooltipParams}>\n                {fieldLayout}\n            </div>\n\n    }\n}\n\nconst mapStateToProps = state => ({\n    browser: state.browser\n})\n\nconst mapDispatchToProps = dispatch => ({\n    changeSettings: (actionType, settingKey, newValue) => dispatch(changeSettings(actionType, settingKey, newValue)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputField);\n\n\n// if (inputField.type == \"textinput\"){\n\n//     fieldLayout = <TextInput\n//             noLayout\n//             value={this.props.value}\n//             onChange={(e) => this.changeSettingValue(e.target.value)}\n//             label={this.props.setting.name}\n//             {...inputField.params}/>\n\n// } else if (inputField.type == \"switch\"){\n\n//     fieldLayout = <div style={{display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\"}}>\n//             <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n//             <Switch\n//                 id = {this.props.setting.key}\n//                 checked={this.props.value}\n//                 onChange={(e) => this.changeSettingValue(e.target.checked) }\n//                 {...inputField.params}/>\n//         </div>\n\n// } else if (inputField.type == \"dropdown\") {\n\n//     fieldLayout = <div style={{display:\"flex\", justifyContent:\"center\", alignItems:\"center\"}}>\n//         <div style={{paddingRight: 20}}>{this.props.setting.name + \":\"}</div>\n//         <div style={{flex:1}}>\n//             <Select\n//                 value={ Array.isArray(this.props.value) ? this.props.value.map(val => _.find(inputField.params.options, {value: val})) : _.find(inputField.params.options, {value: this.props.value})}\n//                 onChange={(obj) => this.changeSettingValue(Array.isArray(obj) ? obj.map(obj => obj.value) : obj ? obj.value : null )}\n//                 {...inputField.params}/>\n//         </div>\n//         </div>\n\n// } else if (inputField.type == \"color\") {\n\n//     let colorPicker = this.state.displayColorPicker ? (\n//         <div style={{position: \"absolute\", bottom: 60}}>\n//             <ChromePicker\n//                 color={this.props.value}\n//                 onChangeComplete={(color) => this.changeSettingValue(color.hex)}\n//                 {...inputField.params}/>\n//         </div>\n//     ) : null;\n\n//     fieldLayout = <div style={{position: \"relative\",display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\"}}>\n//             <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n//             <div \n//                 className=\"z-depth-2\"\n//                 onClick={this.toggleColorPicker}\n//                 style={{width: 30, height: 30, borderRadius: 30, background: this.props.value}}/>\n            \n//             {colorPicker}\n//         </div>\n// } else if (inputField.type == \"rangeslider\"){\n\n//     fieldLayout = <div style={{paddingLeft: \"10%\", paddingRight: \"10%\"}}>\n//     <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n//     <Range\n//         value={this.props.value}\n//         onChange={(value) => this.changeSettingValue(value)}\n//         {...inputField.params}\n//         />\n//   </div>\n\n// } else if (inputField.type == \"range\"){\n\n//     fieldLayout = <div>\n//         <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n//         <div style={{display: 'flex'}}>\n//             <input\n//                 style={{marginRight: 30, flex:1}}\n//                 type=\"number\"\n//                 value={this.props.value[0]}\n//                 onChange={(e) => this.props.value[1] >= Number(e.target.value) ? \n//                     this.changeSettingValue( [InputField.number(e.target.value), this.props.value[1]] ) : null}\n//                 {...inputField.params}/>\n//             <input\n//                 style={{marginLeft: 30, flex:1}}\n//                 type=\"number\"\n//                 value={this.props.value[1]}\n//                 onChange={(e) => Number(e.target.value) >= this.props.value[0] ? \n//                     this.changeSettingValue( [this.props.value[0], InputField.number(e.target.value)] ) : null }\n//                 {...inputField.params}/>\n//         </div>\n        \n//     </div>\n\n// } else if (inputField.type == \"number\"){\n\n//     fieldLayout = <div>\n//         <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n//         <input\n//             type=\"number\"\n//             value={this.props.value}\n//             onChange={(e) => this.changeSettingValue( InputField.number(e.target.value) )}\n//             {...inputField.params}/>\n//         </div>\n// } else if (inputField.type == \"queries\"){\n\n//     fieldLayout = <div>\n//         <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n//         <QueriesField \n//             changeSettingValue={this.changeSettingValue}\n//             setting={this.props.setting}\n//             value={this.props.value}\n//             w={this.w}/>\n//     </div>\n// }\n","import React, { Component } from 'react'\n\nimport { Row, Collapsible, CollapsibleItem, Icon, Col, Button} from 'react-materialize'\nimport InputField from \"./InputField\"\n\nimport parse from 'html-react-parser';\nimport _ from \"lodash\"\nimport { HotKeys, ObserveKeys } from 'react-hotkeys';\nimport { SETTING_GROUP_HOT_KEYS, SETTING_CONTAINER_HOT_KEYS } from '../../utils/hotkeys';\n\nexport default class SettingsContainer extends Component {\n\n    constructor(props){\n        super(props)\n    }\n\n    hotKeysHandlers = {\n        MOVE_EXPANDED_UP: () => this.moveExpanded(\"up\"),\n        MOVE_EXPANDED_DOWN: () => this.moveExpanded(\"down\")\n    }\n\n    moveExpanded = (direction = \"down\") => {\n\n        var newExpanded;\n        if (direction == \"up\"){\n            newExpanded = this.state.expanded != 0 ? this.state.expanded - 1 : 2\n        } else if (direction == \"down\"){\n            newExpanded = this.state.expanded != 2 ? this.state.expanded + 1 : 0 \n        }\n\n        console.warn(this.refs)\n\n        this.setState({expanded: newExpanded})\n    }\n\n    renderSettingsGroup = (settingsGroup) => {\n\n        return settingsGroup.map(setting => {\n\n            if (!setting.inputField) return null\n        \n            return <InputField \n                        key={setting.key}\n                        setting={setting} \n                        value={this.props.settings[setting.key]}\n                        onSettingChangeType={this.props.onSettingChangeType}/>\n        }) \n    }\n\n    renderSettingsGroups = (groupedParams) => {\n\n        return this.props.paramGroups.map((paramGroup, iParamGroup) => {\n\n            let groupKey = paramGroup.key ? paramGroup.key : \"null\";\n\n            let settingsGroup = groupedParams[groupKey]\n\n            if (!settingsGroup) return null\n\n            let subGrouped = _.groupBy(settingsGroup, \"subGroup\")\n\n            let subGroups = paramGroup.subGroups ? [{key: \"null\", name: null},  ...paramGroup.subGroups] : [{key: \"null\", name: null}]\n\n            let itemContent = subGroups.map(({key, name}) => {\n\n                if ( ! subGrouped[key] ) return null\n                \n                return <div key={key}>\n                    <div style={{paddingBottom: 20, fontWeight:\"bold\", fontSize: \"1.3em\", textAlign: \"left\"}}>{name}</div>\n                    <div style={{display: \"flex\", flexWrap: \"wrap\", justifyContent: \"space-around\", alignItems: \"center\"}}>{this.renderSettingsGroup(subGrouped[key])}</div>\n                </div>\n            })\n\n            const submitSettings = () => this.props.submitSettings( settingsGroup.reduce((settings, setting) => {\n                settings[setting.key] = this.props.settings[setting.key]\n                return settings\n            }, {}))\n\n            const hotKeysHandlers = {\n                SUBMIT_SETTINGS: submitSettings,\n                UNDO_SETTINGS: this.props.undoSettings,\n            }\n\n            return (\n                <CollapsibleItem\n                    key={groupKey}\n                    header={paramGroup.name} \n                    icon={<Icon>{paramGroup.icon}</Icon>}>\n                    <HotKeys keyMap={SETTING_GROUP_HOT_KEYS} handlers={hotKeysHandlers}>\n                        <ObserveKeys>\n                        <blockquote style={{textAlign: \"left\"}}>\n                            {parse(paramGroup.description)}\n                        </blockquote>\n                        {itemContent}\n                        <div style={{display: \"flex\", flexWrap: \"wrap\", justifyContent: \"space-around\"}}>\n                            <Button\n                                onClick={this.props.undoSettings}\n                                data-tip=\"This will roll back to previous settings.<br> IT AFFECTS ALL GROUPS OF PARAMETERS, not only this one.\"\n                                className=\"orange\"\n                                style={{margin:20}}>\n                                    <Icon left>arrow_back_ios</Icon>Previous settings\n                            </Button>\n\n                            <Button\n                                data-tip=\"This will restore all settings to the plot's defaults\"\n                                className=\"red\" style={{margin:20}}><Icon left>refresh</Icon>Restore defaults</Button>\n\n                            <Button\n                                data-tip=\"This will change the settings and will update everything accordingly.<br> IT ONLY AFFECTS THIS GROUP OF SETTINGS, not all settings\"\n                                onClick={submitSettings}\n                                className=\"blue\" \n                                style={{margin:20}}>\n                                    Submit settings<Icon right>arrow_forward_ios</Icon>\n                            </Button>\n                            \n                        </div>\n                        </ObserveKeys>\n                    </HotKeys>\n                </CollapsibleItem> \n            )\n\n        })\n    }\n\n    render() {\n\n        let groupedParams = _.groupBy(this.props.params, \"group\")\n\n        return (\n            <Collapsible popout defaultActiveKey={this.props.defaultActiveKey || 0}>\n                {this.renderSettingsGroups(groupedParams)}          \n            </Collapsible>\n        )\n    }\n}\n\n","import React, { Component } from 'react'\nimport { Row, Col} from 'react-materialize'\nimport ReactTooltip from \"react-tooltip\"\n\nimport PythonApi from \"../apis/PythonApi\"\n\n//--Components\nimport PlotCard from '../components/plots/PlotCard'\nimport SettingsContainer from '../components/settings/SettingsContainer'\n\nimport { toast } from 'react-toastify';\n\n//--Redux\nimport { connect } from 'react-redux'\nimport { addPlots, setNewStructures, setActivePlot, setCurrentSession, informLoadedPlot, informLoadingPlot } from \"../redux/actions\"\nimport { CHANGE_PLOT_SETTINGS } from '../redux/actions/actionTypes'\nimport { GlobalHotKeys } from 'react-hotkeys'\nimport { PLOT_TWEAKING_HOT_KEYS } from '../utils/hotkeys'\n\n\n\nclass PlotTweaking extends Component {\n\n    hotKeysHandlers = {\n        UNDO_SETTINGS: () => this.undoSettings(),\n        SUBMIT_ALL_SETTINGS: () => this.submitSettings(\"all\")\n    }\n\n    componentDidMount(){\n\n        PythonApi.getSessionSettings(session => this.props.setCurrentSession(session))\n    }\n\n    submitSettings = (settings) => {\n\n        if (settings = \"all\"){\n            settings = this.props.active.plot.settings\n        }\n\n        this.props.informLoadingPlot({id: this.props.active.plot.id, ...this.props.active.plot, struct: {name: this.props.active.plot.struct}})\n\n        PythonApi.updatePlotSettings(this.props.active.plot.id, settings, (plot) => {\n            this.props.addPlots( {[plot.id]: plot})\n\n            if (this.props.active.plot.id == plot.id){\n                this.props.setActivePlot(plot)\n            }\n\n            toast.success(\"Settings submitted\")\n            this.props.informLoadedPlot(plot.id)\n            document.dispatchEvent(new Event(\"newPlot\"))\n            \n        })\n    }\n\n    undoSettings = () => {\n\n        PythonApi.undoPlotSettings(this.props.active.plot.id, (plot) => {\n            this.props.addPlots( {[plot.id]: plot})\n\n            if (this.props.active.plot.id == plot.id){\n                this.props.setActivePlot(plot)\n            }\n\n            toast.success(\"Rolled back settings\")\n        })\n    }\n\n    render() {\n\n        if (! this.props.active.plot ) return null\n\n        let setsCont = <SettingsContainer\n                            settings={this.props.active.plot.settings}\n                            params={this.props.active.plot.params}\n                            paramGroups={this.props.active.plot.paramGroups}\n                            onSettingChangeType={CHANGE_PLOT_SETTINGS}\n                            submitSettings={this.submitSettings}\n                            undoSettings={this.undoSettings}/>\n        \n        return (\n            <div style={{...this.props.style}}>\n                <GlobalHotKeys keyMap={PLOT_TWEAKING_HOT_KEYS.global} handlers={this.hotKeysHandlers}/>\n                <Row>\n                    <Col className=\"s12 l4\" style={{height:\"90vh\", display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems:\"center\"}}>\n                        <PlotCard plot={this.props.active.plot} style={{height: \"80vh\"}}/>\n                    </Col>\n                    <Col className=\"s12 l8\" >\n                        {this.props.browser.mediaType == \"infinity\" ? <div className=\"scrollView\" style={{ maxHeight: \"90vh\" }}>{setsCont}</div> : setsCont}\n                    </Col>\n                </Row>\n                <ReactTooltip multiline disable={this.props.session.settings ? !this.props.session.settings.showTooltips : false}/>  \n            </div>\n            \n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    plots: state.plots,\n    structures: state.structures,\n    active: state.active,\n    session: state.session,\n    browser: state.browser\n})\n\nconst mapDispatchToProps = {\n    setCurrentSession,\n    addPlots,\n    setActivePlot,\n    setNewStructures,\n    informLoadedPlot,\n    informLoadingPlot\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlotTweaking);\n","import React, { Component } from 'react'\nimport PythonApi from \"../apis/PythonApi\"\n\n//--Components\nimport ReactTooltip from \"react-tooltip\"\nimport SettingsContainer from \"../components/settings/SettingsContainer\"\n\n//--Redux\nimport { connect } from 'react-redux'\nimport { setCurrentSession } from \"../redux/actions\"\n\nimport { toast } from 'react-toastify';\n\nimport _ from \"lodash\"\nimport { CHANGE_SESSION_SETTINGS } from '../redux/actions/actionTypes'\n\nclass Settings extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {}\n    }\n\n    submitSettings = (settings) => {\n\n        PythonApi.updateSessionSettings(this.props.session.id, settings, (session) => {\n            this.props.setCurrentSession(session)\n            document.dispatchEvent(new CustomEvent(\"syncWithSession\", {detail: {session}}))\n            toast.success(\"Session settings have been updated\")\n        })\n    }\n\n    undoSettings = () => {\n\n        PythonApi.undoSessionSettings(this.props.session.id, (session) => {\n            this.props.setCurrentSession(session)\n            document.dispatchEvent(new CustomEvent(\"syncWithSession\", {detail: {session}}))\n            toast.success(\"Session settings have been rolled back\")  \n            \n        })\n    }\n\n    componentDidMount(){\n        PythonApi.getSessionSettings( session => this.props.setCurrentSession(session))\n    }\n\n    render() {\n\n        if ( _.isEmpty(this.props.session) ) return null\n\n        return (\n            <div style={{...this.props.style, padding: 20}}>\n                <SettingsContainer\n                    defaultActiveKey={1}\n                    settings={this.props.session.settings}\n                    params={this.props.session.params}\n                    paramGroups={this.props.session.paramGroups}\n                    onSettingChangeType={CHANGE_SESSION_SETTINGS}\n                    submitSettings={this.submitSettings}\n                    undoSettings={this.undoSettings}/>\n                <ReactTooltip multiline disable={this.props.session.settings ? !this.props.session.settings.showTooltips : false}/>\n            </div>\n            \n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    session: state.session\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setCurrentSession: (session) => dispatch(setCurrentSession(session)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n","import React, { Component } from 'react'\nimport ReactMarkDown from \"react-markdown\"\nimport { IoIosArrowDown, IoIosArrowUp } from 'react-icons/io'\n\nexport default class Method extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            showingDetails: false\n        }\n    }\n\n    applyMethod = () => {\n\n    }\n\n    renderDetails = () => {\n\n        return <div style={{transition: \"all 1s\", maxHeight: this.state.showingDetails ? undefined : 0, overflow: \"hidden\"}}>\n            <div style={{padding: 20, fontSize: 13}}>\n                <ReactMarkDown source={\"All the help\\n\\n blalbalbal \\n\\n Parameters\\n---------\"}/>\n            </div>\n            <div onClick={this.applyMethod} style={{cursor: \"pointer\"}}>APPLY METHOD</div>\n        </div>\n    }\n\n    render() {\n\n        const iconRot = this.state.showingDetails ? \"rotate(180deg)\" : \"rotate(0)\"\n        const headerColor =  this.state.showingDetails ? \"#ccc\" : \"whitesmoke\"\n        return (\n            <div>\n                <div\n                    className=\"hoverable\"\n                    style={{display: \"flex\", padding: 20, cursor: \"pointer\", justifyContent: \"space-between\", alignItems: \"center\", backgroundColor: headerColor, transition: \"all 500ms\"}} \n                    onClick={() => this.setState({showingDetails: !this.state.showingDetails})}>\n                    <div>\n                        <span style={{color: \"gray\", marginRight: 10}}>(ctrl+z)</span>\n                        <span style={{fontWeight: \"bold\"}}>Method name</span>\n                    </div>\n                    <IoIosArrowDown style={{transition: \"all 500ms\", transform: iconRot}}/>\n                </div>\n                {this.renderDetails()}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Method from './Method'\n\nexport default class Methods extends Component {\n    render() {\n        return (\n            <div style={{textAlign: \"left\", backgroundColor: \"white\", borderRadius: 3, overflow: \"hidden\"}}>\n                {[1,2,3,4].map(method => <Method/>)}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Row, Col} from 'react-materialize'\nimport ReactTooltip from \"react-tooltip\"\n\n//--Components\nimport PlotCard from '../components/plots/PlotCard'\n\n//--Redux\nimport { connect } from 'react-redux'\nimport { addPlots, setNewStructures, setActivePlot, setCurrentSession, informLoadedPlot, informLoadingPlot } from \"../redux/actions\"\nimport { CHANGE_PLOT_SETTINGS } from '../redux/actions/actionTypes'\nimport { GlobalHotKeys } from 'react-hotkeys'\nimport { PLOT_TWEAKING_HOT_KEYS } from '../utils/hotkeys'\nimport Methods from '../components/pythonMethods/Methods'\n\n\n\nclass PlotMethods extends Component {\n\n    hotKeysHandlers = {\n    }\n\n    render() {\n\n        if (! this.props.active.plot ) return null\n        \n        return (\n            <div style={{...this.props.style}}>\n                <GlobalHotKeys keyMap={PLOT_TWEAKING_HOT_KEYS.global} handlers={this.hotKeysHandlers}/>\n                <Row>\n                    <Col className=\"s12 l4\" style={{height:\"90vh\", display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems:\"center\"}}>\n                        <PlotCard plot={this.props.active.plot} style={{height: \"80vh\"}}/>\n                    </Col>\n                    <Col className=\"s12 l8\" style={{paddingTop: 100}}>\n                        <Methods plot={this.props.active.plot}/>\n                    </Col>\n                </Row>\n                <ReactTooltip multiline disable={this.props.session.settings ? !this.props.session.settings.showTooltips : false}/>  \n            </div>\n            \n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    plots: state.plots,\n    structures: state.structures,\n    active: state.active,\n    session: state.session,\n    browser: state.browser\n})\n\nconst mapDispatchToProps = {\n    setCurrentSession,\n    addPlots,\n    setActivePlot,\n    setNewStructures,\n    informLoadedPlot,\n    informLoadingPlot\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlotMethods);\n","import React, { Component } from 'react'\n\nimport _ from \"lodash\"\n\n//--Components\nimport ReactTooltip from \"react-tooltip\"\nimport PlotDashboard from '../components/plots/PlotDashboard';\n\n//--Python api \nimport PythonApi from '../apis/PythonApi'\n\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.min.css'\n\n//--Redux\nimport { connect } from 'react-redux'\nimport {addPlots, addTabs, setNewStructures, setActiveTab, setActivePlot, setSessionTabs, setCurrentSession, setNewPlotables, setActivePage, setActiveStructs} from \"../redux/actions\"\nimport StructurePicker from '../components/structures/StructurePicker'\nimport PlotInitializer from '../components/plotInitializer/PlotInitializer'\nimport LoadingTracker from '../components/loading/LoadingTracker'\nimport Tabs from '../components/tabs/Tabs'\nimport Controls from '../components/controls/Controls'\nimport PlotTweaking from './PlotTweaking'\nimport Settings from './Settings'\n\nimport {HotKeys, getApplicationKeyMap, GlobalHotKeys} from 'react-hotkeys'\nimport { GLOBAL_HOT_KEYS, ADDITIONAL_GLOBAL_HOT_KEYS } from '../utils/hotkeys';\nimport PlotMethods from './PlotMethods';\n\n\nclass Plots extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            displayPlotInitializer: false,\n            plotToInitialize: {\n                struct: false,\n                animation: false\n            },\n            loadingPlots: [],\n            plotOptions:[]\n        }\n\n        this.syncWithSession()\n\n        document.addEventListener(\"syncWithSession\", (e) => this.syncWithSession(e.detail.session) )\n\n        document.addEventListener(\"updateTabs\", (e) => this.updateTabs(e.detail.tabs))\n\n        document.addEventListener(\"newPlot\", () => this.updateTabs())\n\n        document.addEventListener(\"sessionUpdate\", (e) => {\n            e.detail.justUpdated.forEach( plotID => {\n\n                console.log(plotID)\n                \n                this.setState({loadingPlots: [...this.state.loadingPlots, plotID]})\n                PythonApi.getPlot(plotID, plot => {\n                    this.props.addPlots({[plot.id]: plot})\n                    this.setState({loadingPlots: this.state.loadingPlots.filter(id => id != plotID)})\n                })\n\n            })\n\n        })\n\n        this.hotKeysListener()\n            \n    }\n\n    hotKeysHandlers = {\n        GO_TO_SETTINGS: () => this.props.setActivePage(\"settings\"),\n        GO_TO_DASHBOARD: () => this.props.setActivePage(\"plots\"),\n        SHOW_AVAIL_HOTKEYS: () => console.warn(getApplicationKeyMap())\n    }\n\n    syncWithSession = (session) => {\n\n        this.updateTabs()\n\n        PythonApi.getPlotOptions( plotOptions => this.setState({plotOptions}) )\n\n        PythonApi.getAvailableStructs( (structures, {plotables}) => {this.props.setNewStructures(structures);this.props.setNewPlotables(plotables)} )\n        \n        if (session){\n            this.props.setCurrentSession(session)\n        } else {\n            PythonApi.getSessionSettings(session => this.props.setCurrentSession(session))\n        }\n        \n    }\n\n    hotKeysListener = () => {\n\n        // document.addEventListener(\"keydown\", (e) => {\n        //     hotKeyAction(e, this, this._mainCompRef)\n        // })\n    }\n\n    componentDidMount(){\n\n        this.props.setActivePlot(undefined)\n\n        //Add the listener to display or not the plot initializer\n        this.listener = document.addEventListener(\"togglePlotInitializer\", this.togglePlotInitializer)\n        \n    }\n\n    componentDidUpdate(){\n\n        let activeTab = _.find(this.props.tabs, [\"id\", this.props.active.tab]) \n        \n        if (!activeTab) return\n\n        //Get the missing plots if there are any\n        activeTab.plots.forEach(plotID => {\n\n            if ( !this.props.plots[plotID] && this.state.loadingPlots.indexOf(plotID) == -1){\n\n                this.setState({loadingPlots: [...this.state.loadingPlots, plotID]})\n                PythonApi.getPlot(plotID, plot => {\n                    this.props.addPlots({[plot.id]: plot})\n                    this.setState({loadingPlots: this.state.loadingPlots.filter(id => id != plotID)})\n                })\n                \n            }\n        })\n\n    }\n\n    updateTabs = (tabs) => {\n\n        if (tabs){\n            this.props.setSessionTabs(tabs)\n        } else {\n            PythonApi.getSessionTabs( tabs => {\n                this.props.setSessionTabs(tabs)\n                \n                let activeTab = _.find(tabs, [\"id\", this.props.active.tab])\n\n                if (!activeTab) this.props.setActiveTab( tabs.length > 0 ? tabs[0].id : undefined)\n            })\n        }\n\n    }\n\n    getNewPlot = () => {\n\n        this.setState({isLoading: true})\n\n        PythonApi.getNewPlot({tabID: this.props.active.tab, ...this.state.plotToInitialize}, (plot, reqParams) => {\n\n            this.updateTabs()\n            this.props.addPlots({[plot.id]: plot})\n\n            this.togglePlotInitializer()\n            this.props.setActiveTab(reqParams.tabID)\n            this.setState({isLoading: false})\n        })\n\n    }\n\n    togglePlotInitializer = (e) => {\n\n        let currentlyShowing = this.props.active.page == \"plotInitializer\"\n\n        if (e != undefined & e.detail != undefined) {\n            if (e.detail.forceShow &&  !currentlyShowing){\n                this.props.setActivePage(\"plotInitializer\")\n            } if (e.detail.forceHide && currentlyShowing){\n                this.props.setActivePage(\"plots\")\n            }\n        } else {\n            this.props.setActivePage(currentlyShowing ? \"plots\" : \"plotInitializer\")\n        }\n\n    }\n\n    render() {\n\n        const MainComponent = {\n            'plots': PlotDashboard,\n            'settings': Settings,\n            'plotTweaking': PlotTweaking,\n            'plotMethods': PlotMethods,\n            'plotInitializer': PlotInitializer\n        }[this.props.active.page]\n\n        return (\n            <div style={{marginBottom: 0, display: \"flex\", flexWrap: \"wrap\"}}>\n                <GlobalHotKeys keyMap={{...GLOBAL_HOT_KEYS}} handlers={this.hotKeysHandlers}/>\n                <div style={{marginLeft: 15, marginRight: 15, width: \"10vw\", minWidth: 150}}>\n                    <StructurePicker structures={this.props.structures}/>   \n                </div>\n                <div style={{flex: 1, height: \"100vh\", display: \"flex\", flexDirection: \"column\"}}>\n                    <LoadingTracker/>\n                    {this.props.active.page == \"plots\" ? <Tabs/> : null}\n                    <MainComponent style={{flex: 1}}/>\n                    <Controls/>\n                </div>\n                <ToastContainer/>\n                <ReactTooltip multiline disable={this.props.session.settings ? !this.props.session.settings.showTooltips : false}/>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    plots: state.plots,\n    structures: state.structures,\n    tabs: state.tabs,\n    active: state.active,\n    session: state.session\n})\n\nconst mapDispatchToProps = {\n    setCurrentSession,\n    setActiveTab,\n    setSessionTabs,\n    setActivePlot,\n    addPlots,\n    setNewStructures,\n    setNewPlotables,\n    setActivePage\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Plots);","import React from \"react\";\nimport { Switch } from \"react-router-dom\";\nimport Route from \"./Route\";\n\nimport Plots from \"../pages/Plots\";\nimport Settings from \"../pages/Settings\";\nimport PlotTweaking from \"../pages/PlotTweaking\";\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/plots\" exact component={Plots} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/plotTweaking\" component={PlotTweaking}/>\n\n      {/* redirect user to SignIn page if route does not exist and user is not authenticated */}\n      <Route component={Plots} />\n    </Switch>\n  );\n}\n","import { createStore } from 'redux'\nimport {responsiveStoreEnhancer} from 'redux-responsive'\nimport { persistStore} from 'redux-persist'\n\nimport rootReducer from '../reducers'\n\nexport default () => {\n  let store = createStore(rootReducer, responsiveStoreEnhancer)\n  let persistor = persistStore(store)\n  //persistor.purge()\n  return { store, persistor }\n}","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\"\n\n//--Navigation\nimport { Router } from 'react-router-dom';\nimport history from './apis/history';\nimport Routes from './routes';\n\n//--Redux\nimport getStoreAndPersistor from './redux/store'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nconst {store, persistor} = getStoreAndPersistor()\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <div className=\"App\" style={{display: \"flex\", flexDirection: \"column\"}}>\n          <div className = \"appContent\" style={{height: \"100vh\"}}>\n            <Router history={history}>\n              <Routes />\n            </Router>\n          </div>   \n        </div>\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}